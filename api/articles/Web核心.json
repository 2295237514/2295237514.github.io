{"title":"Web核心","uid":"2d34257e8e68ae00ecf08b330efedcd5","slug":"Web核心","date":"2022-07-06T06:27:05.000Z","updated":"2022-07-11T09:52:35.067Z","comments":true,"path":"api/articles/Web核心.json","keywords":null,"cover":[],"content":"<h1 id=\"Web概述\"><a href=\"#Web概述\" class=\"headerlink\" title=\"Web概述\"></a>Web概述</h1><h2 id=\"JavaWeb技术栈\"><a href=\"#JavaWeb技术栈\" class=\"headerlink\" title=\"JavaWeb技术栈\"></a>JavaWeb技术栈</h2><ul>\n<li><p>B&#x2F;S架构：Browser&#x2F;Server，浏览器&#x2F;服务器 架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取Web资源，服务器把Web资源发送给浏览器即可</p>\n<ul>\n<li>好处：易于维护升级：服务器升级苟，客户端无需任何不输就可以使用到新的版本</li>\n</ul>\n</li>\n<li><p>静态资源：HTML  CSS  JavaScript  图片等。 负责页面展现</p>\n</li>\n<li><p>动态资源：Servlet  Jsp等。 负责逻辑处理</p>\n</li>\n<li><p>数据库：负责存储数据</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220706143521.png\"></p>\n<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><ul>\n<li><p>概念：HyperText  Transfer  Protocol， 超文本传输协议，规定了浏览器和服务器之间数据传输的规则</p>\n</li>\n<li><p>HTTP协议特点：</p>\n<p>1.基于TCP协议：面向连接，安全</p>\n<p>2.基于请求-响应模型：一次请求对应一次响应</p>\n<p>3.HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的</p>\n<ul>\n<li>缺点：多次请求间不能共享数据       <em>Java中使用会话技术（Cookie、Session）来解决</em></li>\n<li>有点：速度快</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"请求数据格式\"><a href=\"#请求数据格式\" class=\"headerlink\" title=\"请求数据格式\"></a>请求数据格式</h2><ul>\n<li>请求数据分为三部分：</li>\n</ul>\n<p>1.请求行：请求数据的第一行。其中GET表示请求方式，&#x2F;表示请求资源路径，HTTP&#x2F;1.1表示协议版本</p>\n<p>2.请求头：第二行开始，格式为key：value形式，常见的HTTP请求头有:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Host: 表示请求的主机名\nUser-Agent: 浏览器版本,例如Chrome浏览器的标识类似Mozilla&#x2F;5.0 ...Chrome&#x2F;79，IE浏览器的标识类似Mozilla&#x2F;5.0 (Windows NT ...)like Gecko；\nAccept：表示浏览器能接收的资源类型，如text&#x2F;*，image&#x2F;*或者*&#x2F;*表示所有；\nAccept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；\nAccept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</code></pre>\n\n<p>3.请求体：POST请求的最后一部分，存放请求参数</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220706151130.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220706151439.png\"></p>\n<h2 id=\"响应数据格式\"><a href=\"#响应数据格式\" class=\"headerlink\" title=\"响应数据格式\"></a>响应数据格式</h2><ul>\n<li><p>1.响应行：响应数据的第一行。其中HTTP&#x2F;1.1表示协议版本，200表示响应状态码，OK表示状态码描述</p>\n</li>\n<li><p>2.响应头：第二行开始，格式为key：value形式，常见的HTTP响应头有:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Content-Type：表示该响应内容的类型，例如text&#x2F;html，image&#x2F;jpeg；\nContent-Length：表示该响应内容的长度（字节数）；\nContent-Encoding：表示该响应压缩算法，例如gzip；\nCache-Control：指示客户端应如何缓存，例如max-age&#x3D;300表示可以最多缓存300秒</code></pre>\n</li>\n<li><p>3.响应体：最后一部分。存放相应数据</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220706152548.png\"></p>\n<h3 id=\"一、状态码大类\"><a href=\"#一、状态码大类\" class=\"headerlink\" title=\"一、状态码大类\"></a>一、状态码大类</h3><table>\n<thead>\n<tr>\n<th>状态码分类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1xx</td>\n<td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td>\n</tr>\n</tbody></table>\n<p>状态码大全：<a href=\"https://cloud.tencent.com/developer/chapter/13553\">https://cloud.tencent.com/developer/chapter/13553</a> </p>\n<h3 id=\"二、常见的响应状态码\"><a href=\"#二、常见的响应状态码\" class=\"headerlink\" title=\"二、常见的响应状态码\"></a>二、常见的响应状态码</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>英文描述</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>200</td>\n<td><strong><code>OK</code></strong></td>\n<td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td>\n</tr>\n<tr>\n<td>302</td>\n<td><strong><code>Found</code></strong></td>\n<td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td>\n</tr>\n<tr>\n<td>304</td>\n<td><strong><code>Not Modified</code></strong></td>\n<td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td>\n</tr>\n<tr>\n<td>400</td>\n<td><strong><code>Bad Request</code></strong></td>\n<td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td>\n</tr>\n<tr>\n<td>403</td>\n<td><strong><code>Forbidden</code></strong></td>\n<td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td>\n</tr>\n<tr>\n<td>404</td>\n<td><strong><code>Not Found</code></strong></td>\n<td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td>\n</tr>\n<tr>\n<td>428</td>\n<td><strong><code>Precondition Required</code></strong></td>\n<td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td>\n</tr>\n<tr>\n<td>429</td>\n<td><strong><code>Too Many Requests</code></strong></td>\n<td><strong>太多请求</strong>，可以限制客户端请求某个资源的数量，配合 Retry-After(多长时间后可以请求)响应头一起使用</td>\n</tr>\n<tr>\n<td>431</td>\n<td><strong><code> Request Header Fields Too Large</code></strong></td>\n<td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td>\n</tr>\n<tr>\n<td>405</td>\n<td><strong><code>Method Not Allowed</code></strong></td>\n<td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td>\n</tr>\n<tr>\n<td>500</td>\n<td><strong><code>Internal Server Error</code></strong></td>\n<td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td>\n</tr>\n<tr>\n<td>503</td>\n<td><strong><code>Service Unavailable</code></strong></td>\n<td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td>\n</tr>\n<tr>\n<td>511</td>\n<td><strong><code>Network Authentication Required</code></strong></td>\n<td><strong>客户端需要进行身份验证才能获得网络访问权限</strong></td>\n</tr>\n</tbody></table>\n<h1 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h1><p>Web服务器是一个应用程序（软件），对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让开发更加便捷，主要功能是提供网上信息浏览服务 </p>\n<p>作用：</p>\n<ul>\n<li>封装HTTP协议操作，简化开发</li>\n<li>可以将web项目部署到服务器中，对外提供网上浏览服务</li>\n</ul>\n<p>Tomcat是一个轻量级的Web服务器，支持Servlet&#x2F;JSP少量JavaEE规范，也称为Web服务器，Servlet容器</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220707170900.png\"></p>\n<h2 id=\"部署项目\"><a href=\"#部署项目\" class=\"headerlink\" title=\"部署项目\"></a>部署项目</h2><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220707171555.png\"></p>\n<h2 id=\"IDEA中创建Maven-Web项目\"><a href=\"#IDEA中创建Maven-Web项目\" class=\"headerlink\" title=\"IDEA中创建Maven Web项目\"></a>IDEA中创建Maven Web项目</h2><h3 id=\"项目结构：\"><a href=\"#项目结构：\" class=\"headerlink\" title=\"项目结构：\"></a>项目结构：</h3><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220707172439.png\"></p>\n<h3 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h3><h4 id=\"1、\"><a href=\"#1、\" class=\"headerlink\" title=\"1、\"></a>1、</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220707172656.png\"></p>\n<h4 id=\"2、\"><a href=\"#2、\" class=\"headerlink\" title=\"2、\"></a>2、</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220707172714.png\"></p>\n<h3 id=\"IDEA集成本地Tomcat\"><a href=\"#IDEA集成本地Tomcat\" class=\"headerlink\" title=\"IDEA集成本地Tomcat\"></a>IDEA集成本地Tomcat</h3><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220711125029.png\"></p>\n<h3 id=\"IDEA中使用Tomcat-Tomcat-Maven插件\"><a href=\"#IDEA中使用Tomcat-Tomcat-Maven插件\" class=\"headerlink\" title=\"IDEA中使用Tomcat - Tomcat Maven插件\"></a>IDEA中使用Tomcat - Tomcat Maven插件</h3><p>1.pom.xml添加Tomcat插件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;build&gt;\n    &lt;plugins&gt;\n    \t&lt;!--Tomcat插件 --&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.tomcat.maven&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;tomcat7-maven-plugin&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.2&lt;&#x2F;version&gt;\n        &lt;&#x2F;plugin&gt;\n    &lt;&#x2F;plugins&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p>2.使用Maven Helper 插件快速启动项目，选中项目，右键 Run Maven –&gt; tomcat7:run</p>\n<h1 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h1><ul>\n<li>Servlet是java提供的一门动态Web资源开发技术</li>\n<li>Servlet是javaEE规范之一，其实就是一个接口，将来我们要定义Servlet类来访问Servlet接口，并由web服务器运行Servlet</li>\n</ul>\n<h2 id=\"Servlet快速入门\"><a href=\"#Servlet快速入门\" class=\"headerlink\" title=\"Servlet快速入门\"></a>Servlet快速入门</h2><p>1.创建一个项目，导入Servlet依赖坐标</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependency&gt;\n    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.1.0&lt;&#x2F;version&gt;\n    &lt;!--\n      此处为什么需要添加该标签?\n      provided指的是在编译和测试过程中有效,最后生成的war包时不会加入\n       因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错\n    --&gt;\n    &lt;scope&gt;provided&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<p>2.创建：定义一个类，实现Servlet接口，并重写接口中的所有方法，并在service方法中输入一句话</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.itheima.web;\n\nimport javax.servlet.*;\nimport java.io.IOException;\n\npublic class ServletDemo1 implements Servlet &#123;\n\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &#123;\n        System.out.println(&quot;servlet hello world~&quot;);\n    &#125;\n    public void init(ServletConfig servletConfig) throws ServletException &#123;\n\n    &#125;\n\n    public ServletConfig getServletConfig() &#123;\n        return null;\n    &#125;\n\n    public String getServletInfo() &#123;\n        return null;\n    &#125;\n\n    public void destroy() &#123;\n\n    &#125;\n&#125;</code></pre>\n\n\n\n<p>3.配置: 在类上使用@WebServlet注解，配置该Servlet的访问路径</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@WebServlet(&quot;&#x2F;demo1&quot;)</code></pre>\n\n\n\n<p>4.访问:启动Tomcat，浏览器输入URL访问该Servlet</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;localhost:8080&#x2F;web-demo&#x2F;demo1</code></pre>\n\n<h2 id=\"Servlet执行流程\"><a href=\"#Servlet执行流程\" class=\"headerlink\" title=\"Servlet执行流程\"></a>Servlet执行流程<img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220711141836.png\"></h2><h2 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h2><ul>\n<li><p>对象的生命周期指一个对象从被创建到被销毁的整个过程</p>\n</li>\n<li><p>Servlet运行在Servlet容器（Web服务器）中，其生命周期由容器来管理，分为4个阶段</p>\n<ul>\n<li>加载和实例化：默认情况下，当Servlet第一次被访问时，其容器创建Servlet对象</li>\n</ul>\n</li>\n</ul>\n<p>\t</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">默认情况，Servlet会在第一次访问被容器创建，但是如果创建Servlet比较耗时的话，\n那么第一个访问的人等待的时间就比较长，用户的体验就比较差，\n那么我们能不能把Servlet的创建放到服务器启动的时候来创建，具体如何来配置?\n\n@WebServlet(urlPatterns &#x3D; &quot;&#x2F;demo1&quot;,loadOnStartup &#x3D; 1)\nloadOnstartup的取值有两类情况\n（1）负整数:第一次访问时创建Servlet对象\n（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</code></pre>\n\n<ul>\n<li><p>初始化：在Servlet实例化之后，容器将调用Servlet的init()方法来初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次</p>\n</li>\n<li><p>请求处理：每次请求Servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理</p>\n</li>\n<li><p>服务终止：当需要释放内存或容器关闭时，容器就会调用Servlet实例的destory()方法完成资源的释放。在destory()方法调用之后，容器会释放这个Servlet实例，该实例随后会被java的垃圾收集器所回收</p>\n</li>\n</ul>\n<h2 id=\"Servlet方法介绍\"><a href=\"#Servlet方法介绍\" class=\"headerlink\" title=\"Servlet方法介绍\"></a>Servlet方法介绍</h2><ul>\n<li>初始化方法，在Servlet被创建时执行，只执行一次</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">void init(ServletConfig config) </code></pre>\n\n<ul>\n<li>提供服务方法， 每次Servlet被访问，都会调用该方法</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">void service(ServletRequest req, ServletResponse res)</code></pre>\n\n<ul>\n<li>销毁方法，当Servlet被销毁时，调用该方法。在内存释放或服务器关闭时销毁Servlet</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">void destroy() </code></pre>\n\n<p>剩下的两个方法是:</p>\n<ul>\n<li>获取Servlet信息</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String getServletInfo() \n&#x2F;&#x2F;该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可\npublic String getServletInfo() &#123;\n    return &quot;&quot;;\n&#125;</code></pre>\n\n<ul>\n<li>获取ServletConfig对象</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ServletConfig getServletConfig()</code></pre>\n\n<h2 id=\"Servlet体系结构\"><a href=\"#Servlet体系结构\" class=\"headerlink\" title=\"Servlet体系结构\"></a>Servlet体系结构</h2><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220711164606.png\"></p>\n<p>我们将来开发B&#x2F;S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet，会继承HttpServlet</p>\n<ol>\n<li><p>HttpServlet使用步骤</p>\n<ol>\n<li>继承HttpServlet</li>\n<li>重写doGet和doPost方法</li>\n</ol>\n</li>\n<li><p>HttpServlet原理</p>\n<p>获取请求方式，并根据不同的请求方式，调用不同的doXxx方法。</p>\n</li>\n</ol>\n<h2 id=\"Servlet-urlPattern配置\"><a href=\"#Servlet-urlPattern配置\" class=\"headerlink\" title=\"Servlet urlPattern配置\"></a>Servlet urlPattern配置</h2><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220711175218.png\"></p>\n","feature":true,"text":"Web概述JavaWeb技术栈 B&#x2F;S架构：Browser&#x2F;Server，浏览器&#x2F;服务器 架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取Web资源，服务器把Web资源发送给浏览器即可 好处...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Web%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">Web概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaWeb%E6%8A%80%E6%9C%AF%E6%A0%88\"><span class=\"toc-text\">JavaWeb技术栈</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP\"><span class=\"toc-text\">HTTP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">请求数据格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">响应数据格式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%8A%B6%E6%80%81%E7%A0%81%E5%A4%A7%E7%B1%BB\"><span class=\"toc-text\">一、状态码大类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81\"><span class=\"toc-text\">二、常见的响应状态码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Tomcat\"><span class=\"toc-text\">Tomcat</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">基本使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">部署项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IDEA%E4%B8%AD%E5%88%9B%E5%BB%BAMaven-Web%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">IDEA中创建Maven Web项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">项目结构：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">创建方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81\"><span class=\"toc-text\">1、</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81\"><span class=\"toc-text\">2、</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IDEA%E9%9B%86%E6%88%90%E6%9C%AC%E5%9C%B0Tomcat\"><span class=\"toc-text\">IDEA集成本地Tomcat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Tomcat-Tomcat-Maven%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">IDEA中使用Tomcat - Tomcat Maven插件</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Servlet\"><span class=\"toc-text\">Servlet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">Servlet快速入门</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">Servlet执行流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">Servlet生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">Servlet方法介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Servlet体系结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet-urlPattern%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Servlet urlPattern配置</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"java的值传递和引用传递","uid":"cf5277bd1519d645b084515a79fe0c20","slug":"java的值传递和引用传递","date":"2022-07-05T08:53:49.000Z","updated":"2022-07-05T09:04:19.413Z","comments":true,"path":"api/articles/java的值传递和引用传递.json","keywords":null,"cover":[],"text":"一、基本类型和引用类型的理解Java中的数据类型分为两种为基本类型和引用类型。 1、基本类型的变量保存原始值，所以变量就是数据本身。 常见的基本类型：byte,short,int,long,char,float,double,Boolean,returnAddress。 2、引用...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"java基础知识","slug":"java基础知识","count":1,"path":"api/tags/java基础知识.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}
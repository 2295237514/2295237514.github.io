{"title":"SSM","uid":"5bf9428aa95fdc2b26bf23a606aad789","slug":"SSM","date":"2022-07-26T08:33:15.000Z","updated":"2022-07-27T01:45:01.171Z","comments":true,"path":"api/articles/SSM.json","keywords":null,"cover":[],"content":"<p><a href=\"https://spring.io/\">spring官网</a></p>\n<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><ul>\n<li>Spring Framework是Spring生态圈中最基础的项目，是其他项目的根基</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220726165418.png\"></p>\n<h2 id=\"学习路线\"><a href=\"#学习路线\" class=\"headerlink\" title=\"学习路线\"></a>学习路线</h2><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220726165701.png\"></p>\n<h2 id=\"核心容器的核心概念\"><a href=\"#核心容器的核心概念\" class=\"headerlink\" title=\"核心容器的核心概念\"></a>核心容器的核心概念</h2><ul>\n<li><p>代码书写现状</p>\n<ul>\n<li>代码耦合度高</li>\n</ul>\n</li>\n<li><p>解决方案</p>\n<ul>\n<li>使用对象时，在程序中不要主动使用new产生对象，转换为由<em>外部</em>提供对象</li>\n</ul>\n</li>\n<li><p><strong>IoC(Inversion of Control) 控制反转</strong></p>\n<ul>\n<li>对象的创建控制权由程序转移到<em>外部</em>，这种思想称为控制反转</li>\n<li>目标：解耦</li>\n</ul>\n</li>\n<li><p>Spring技术对IoC思想进行了实现</p>\n<ul>\n<li>Spring提供了一个容器，称为IoC容器，用来充当IoC思想的<em>外部</em></li>\n<li>IoC容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中统称为Bean</li>\n</ul>\n</li>\n<li><p><strong>DI(Dependency Injection)依赖注入</strong></p>\n<ul>\n<li>在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>本节总结：</strong></p>\n<ul>\n<li><strong>目标：充分解耦</strong><ul>\n<li><strong>在IoC容器中管理bran（IoC）</strong></li>\n<li><strong>在IoC容器内将有依赖关系的bean进行关系绑定（DI）</strong></li>\n</ul>\n</li>\n<li><strong>最终效果</strong><ul>\n<li><strong>使用对象时不仅可以直接从IoC容器中获取，并且获取的bean已经绑定了所有的依赖关系</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"IoC入门案例思路分析\"><a href=\"#IoC入门案例思路分析\" class=\"headerlink\" title=\"IoC入门案例思路分析\"></a>IoC入门案例思路分析</h2><p> 1.管理什么？(Service与Dao)</p>\n<p>2.如何将被管理的对象告知IoC容器？(配置)</p>\n<p>3.被管理的对象叫啊给IoC容器，如何获取到IoC容器？(接口)</p>\n<p>4.IoC容器得到后，如何从容器中获取bean？(接口方法)</p>\n<p>5.使用Spring时怎么导入坐标(pom.xml)</p>\n","feature":true,"text":"spring官网 Spring Spring Framework是Spring生态圈中最基础的项目，是其他项目的根基 学习路线 核心容器的核心概念 代码书写现状 代码耦合度高 解决方案 使用对象时，在程序中不要主动使用new产生对象，转换为由外部提供对象 IoC(Inversio...","link":"","photos":[],"count_time":{"symbolsCount":643,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring\"><span class=\"toc-text\">Spring</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF\"><span class=\"toc-text\">学习路线</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">核心容器的核心概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IoC%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">IoC入门案例思路分析</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JVM","uid":"0b1381c4a63c09e41167c5168339035a","slug":"JVM","date":"2022-07-28T00:37:05.000Z","updated":"2022-07-28T06:11:20.945Z","comments":true,"path":"api/articles/JVM.json","keywords":null,"cover":[],"text":"定义： Java Virtual Machine - java程序的运行环境 (java二进制字节码的运行环境) 好处： 一次编写，到处运行 自动内存管理，垃圾回收功能 数据下标越界检查 多态 比较： ​ JRE: Java Runtime Enviroment（） 常见的JVM...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"计算机组成原理","uid":"56c491e94a7396878a3a1e31f971413b","slug":"计算机组成原理","date":"2022-07-13T13:29:14.000Z","updated":"2022-07-13T13:50:13.422Z","comments":true,"path":"api/articles/计算机组成原理.json","keywords":null,"cover":null,"text":"第一章1.21.2.1 冯诺依曼计算机的特点： 计算机有哦运算器，存储器，控制器，输入设备和输出设备五大部件组成 指令和数据以同等地位存放于存储器中，并可按地址寻访 指令和数据均用二进制数表示 指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位...","link":"","photos":[],"count_time":{"symbolsCount":690,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}
{"title":"前端三件套","uid":"d75b47533ffd84933c1aac3f8bde1caa","slug":"前端三件套基础入门","date":"2022-06-30T02:44:09.000Z","updated":"2022-07-06T06:13:51.796Z","comments":true,"path":"api/articles/前端三件套基础入门.json","keywords":null,"cover":[],"content":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><p>HTML：超文本标记语言<br>超文本：超越了文本的的限制，比普通文本更强大，除了文字信息，还可以定义图片，音频，视频等内容。<br>标记语言：由标签构成的语言</p>\n<p>HTML运行在浏览器上，HTML标签由浏览器来解析</p>\n<p>HTML标签都是预定义好的。例如：使用&lt;img&gt;展示图片</p>\n<ul>\n<li>W3C标准：网页主要由三部分组成<ul>\n<li>结构：HTML</li>\n<li>表现：CSS</li>\n<li>行为：JavaScript</li>\n</ul>\n</li>\n</ul>\n<p>HTML结构：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;&lt;&#x2F;title&gt;\n    &lt;&#x2F;head&gt;\n    &lt;body&gt;\n        \n    &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220630115827.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220630124834.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220630155628.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220630161831.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220630162724.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220630162953.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220630195445.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220702135056.png\"> </p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><p>导入方式：</p>\n<p>1、使用“<link href=\"css文件地址\">”引入css样式；</p>\n<p>2、在style标签里写css样式；</p>\n<p>3、在元素标签里使用style属性写css样式。</p>\n<p>具体使用查W3cschool</p>\n<h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><p>导入方式：</p>\n<p>1、直接引入</p>\n<p>&lt;script&gt;<br>alert(<code>&quot;这是js的内部引入&quot;</code>);<br>&lt;&#x2F;script&gt;</p>\n<p>2、</p>\n<p>定义外部js文件</p>\n<p>&lt;script type&#x3D;”text&#x2F;javascript” src&#x3D;”demo.js”&gt;</p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>结尾 ; 可有可无</p>\n<p>使用window.alert()写入警告框</p>\n<p>使用document.write()写入html输出</p>\n<p>使用console.log()写入浏览器控制台</p>\n<p>用var声明变量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var test &#x3D; 20;\ntest &#x3D; &quot;张三&quot;</code></pre>\n\n<p>Javascript是一门弱类型语言，变量可以存放不同类型的值</p>\n<p>变量名命名规则：</p>\n<ul>\n<li>组成字符可以是任何字母，数组，下划线(_)或美元符号($)</li>\n<li>数字不能开头</li>\n<li>建议使用驼峰命名</li>\n</ul>\n<p>ECMAScript6新增了let关键字来定义变量，它的用法类似于var，但是所声明的变量，只在let关键字所在的代码块内有效，且不允许重复声明</p>\n<p>ECMAScript6新增了const关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变了</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704151254.png\"></p>\n<p>运算符 &#x3D;&#x3D;  和  &#x3D;&#x3D;&#x3D; </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var age1 &#x3D; 20;\nvar age2 &#x3D; &quot;20&quot;;\nalert(age1 &#x3D;&#x3D; age2) &#x2F;&#x2F;会返回true\nalert(age1 &#x3D;&#x3D;&#x3D; age2) &#x2F;&#x2F;会返回false\n&#x2F;*\n\t&#x3D;&#x3D; ：1.判断类型是否一样，如果不一样，先转换成一样\n    \t2.再判断是否相等\n\t&#x3D;&#x3D;&#x3D;：1.判断类型是否一样，如果不一样，直接返回false\n\t\t2.再判断是否相等\n*&#x2F;</code></pre>\n\n\n\n\n\n<p>类型转换：<br>其他类型转为number：</p>\n<ol>\n<li>string: 按照字符串的字面值，转为数字.如果字面值不是数字，则转为NaN。一般使用parseInt</li>\n<li>boolean: true 转为1，false转为0</li>\n</ol>\n<p>其他类型转为boolean：</p>\n<ol>\n<li>number:0和NaN转为false，其他的数字转为true </li>\n<li>string:空字符串转为false，其他的字符串转为true </li>\n<li>null:false </li>\n<li>undefined:false</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704153408.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704154040.png\"></p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704154326.png\"></p>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704155618.png\"></p>\n<h3 id=\"自定义对象\"><a href=\"#自定义对象\" class=\"headerlink\" title=\"自定义对象\"></a>自定义对象</h3><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704155934.png\"></p>\n<h3 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h3><p>BOM：Browser Object Model 浏览器对象模型。也就是 JavaScript 将浏览器的各个组成部分封装为对象。</p>\n<p>我们要操作浏览器的各个组成部分就可以通过操作 BOM 中的对象来实现。比如：我现在想将浏览器地址栏的地址改为 <code>https://www.itheima.com</code> 就可以通过使用 BOM 中定义的 <code>Location</code> 对象的 <code>href</code> 属性，代码： <code>location.href = &quot;https://itheima.com&quot;;</code> </p>\n<p> BOM 中包含了如下对象：</p>\n<ul>\n<li>Window：浏览器窗口对象</li>\n<li>Navigator：浏览器对象</li>\n<li>Screen：屏幕对象</li>\n<li>History：历史记录对象</li>\n<li>Location：地址栏对象</li>\n</ul>\n<p>下图是 BOM 中的各个对象和浏览器的各个组成部分的对应关系</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704160609.png\"></p>\n<h4 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704161016.png\"></p>\n<h4 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704163202.png\"></p>\n<h4 id=\"loaction对象\"><a href=\"#loaction对象\" class=\"headerlink\" title=\"loaction对象\"></a>loaction对象</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704163325.png\"></p>\n<h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p>\n<p>DOM 其实我们并不陌生，之前在学习 XML 就接触过，只不过 XML 文档中的标签需要我们写代码解析，而 HTML 文档是浏览器解析。封装的对象分为</p>\n<ul>\n<li>Document：整个文档对象</li>\n<li>Element：元素对象</li>\n<li>Attribute：属性对象</li>\n<li>Text：文本对象</li>\n<li>Comment：注释对象</li>\n</ul>\n<p>如下图，左边是 HTML 文档内容，右边是 DOM 树</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704164451.png\"></p>\n<p><strong>作用：</strong></p>\n<p>JavaScript 通过 DOM， 就能够对 HTML进行操作了</p>\n<ul>\n<li>改变 HTML 元素的内容</li>\n<li>改变 HTML 元素的样式（CSS）</li>\n<li>对 HTML DOM 事件作出反应</li>\n<li>添加和删除 HTML 元素</li>\n</ul>\n<p><strong>DOM相关概念：</strong></p>\n<p>DOM 是 W3C（万维网联盟）定义了访问 HTML 和 XML 文档的标准。该标准被分为 3 个不同的部分：</p>\n<ol>\n<li><p>核心 DOM：针对任何结构化文档的标准模型。 XML 和 HTML 通用的标准</p>\n<ul>\n<li><p>Document：整个文档对象</p>\n</li>\n<li><p>Element：元素对象</p>\n</li>\n<li><p>Attribute：属性对象</p>\n</li>\n<li><p>Text：文本对象</p>\n</li>\n<li><p>Comment：注释对象</p>\n</li>\n</ul>\n</li>\n<li><p>XML DOM： 针对 XML 文档的标准模型</p>\n</li>\n<li><p>HTML DOM： 针对 HTML 文档的标准模型</p>\n<p>该标准是在核心 DOM 基础上，对 HTML 中的每个标签都封装成了不同的对象</p>\n<ul>\n<li>例如：<code>&lt;img&gt;</code> 标签在浏览器加载到内存中时会被封装成 <code>Image</code> 对象，同时该对象也是 <code>Element</code> 对象。</li>\n<li>例如：<code>&lt;input type=&#39;button&#39;&gt;</code> 标签在浏览器加载到内存中时会被封装成 <code>Button</code> 对象，同时该对象也是 <code>Element</code> 对象。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"获取Element对象\"><a href=\"#获取Element对象\" class=\"headerlink\" title=\"获取Element对象\"></a>获取Element对象</h4><p>HTML 中的 Element 对象可以通过 <code>Document</code> 对象获取，而 <code>Document</code> 对象是通过 <code>window</code> 对象获取。</p>\n<p><code>Document</code> 对象中提供了以下获取 <code>Element</code> 元素对象的函数</p>\n<ul>\n<li><code>getElementById()</code>：根据id属性值获取，返回单个Element对象</li>\n<li><code>getElementsByTagName()</code>：根据标签名称获取，返回Element对象数组</li>\n<li><code>getElementsByName()</code>：根据name属性值获取，返回Element对象数组</li>\n<li><code>getElementsByClassName()</code>：根据class属性值获取，返回Element对象数组</li>\n</ul>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><ul>\n<li><p>事件：HTML事件是发生在HTML元素身上的“事情”。比如：</p>\n<ul>\n<li>按钮被点击</li>\n<li>鼠标移动到元素之上</li>\n<li>按下键盘按键</li>\n</ul>\n</li>\n<li><p>事件监听：Javascript可以在事件被侦测到时执行代码</p>\n</li>\n</ul>\n<h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><p>方式一：通过 HTML标签中的事件属性进行绑定</p>\n<p><code>onclick</code> 是 <code>单击事件</code> 的事件属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&#39;on()’&gt;\nfunction on()&#123;\n\talert(&quot;我被点了&quot;);\n&#125;</code></pre>\n\n<p>方式二：通过 DOM 元素属性绑定</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot;&gt;\ndocument.getElementById(&quot;btn&quot;).onclick &#x3D; function ()&#123;\n    alert(&quot;我被点了&quot;);\n&#125;</code></pre>\n\n<p><strong>为保证单一职责，建议使用方式二</strong></p>\n<h4 id=\"常见事件\"><a href=\"#常见事件\" class=\"headerlink\" title=\"常见事件\"></a>常见事件</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220704173428.png\"></p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>正则对象有两种创建方式：</p>\n<ul>\n<li><p>直接量方式：注意不要加引号</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var reg &#x3D; &#x2F;正则表达式&#x2F;;</code></pre>\n</li>\n<li><p>创建 RegExp 对象</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var reg &#x3D; new RegExp(&quot;正则表达式&quot;);</code></pre></li>\n</ul>\n<p><code>test(str)</code> ：判断指定字符串是否符合规则，返回 true或 false</p>\n<p>从上面创建正则对象的格式中可以看出不管哪种方式都需要正则表达式，那么什么是正则表达式呢？</p>\n<p>正则表达式定义了字符串组成的规则。也就是判断指定的字符串是否符合指定的规则，如果符合返回true，如果不符合返回false。</p>\n<p>正则表达式是和语言无关的。很多语言都支持正则表达式，Java语言也支持，只不过正则表达式在不同的语言中的使用方式不同，js 中需要使用正则对象来使用正则表达式。</p>\n<p>正则表达式常用的规则如下：</p>\n<ul>\n<li><p>^：表示开始</p>\n</li>\n<li><p>$：表示结束</p>\n</li>\n<li><p>[ ]：代表某个范围内的单个字符，比如： [0-9] 单个数字字符</p>\n</li>\n<li><p>.：代表任意单个字符，除了换行和行结束符</p>\n</li>\n<li><p>\\w：代表单词字符：字母、数字、下划线(<em>)，相当于 [A-Za-z0-9</em>]</p>\n</li>\n<li><p>\\d：代表数字字符： 相当于 [0-9]</p>\n</li>\n</ul>\n<p>量词：</p>\n<ul>\n<li><p>+：至少一个</p>\n</li>\n<li><p>*：零个或多个</p>\n</li>\n<li><p>？：零个或一个</p>\n</li>\n<li><p>{x}：x个</p>\n</li>\n<li><p>{m,}：至少m个</p>\n</li>\n<li><p>{m,n}：至少m个，最多n个</p>\n</li>\n</ul>\n","text":"HTMLHTML：超文本标记语言超文本：超越了文本的的限制，比普通文本更强大，除了文字信息，还可以定义图片，音频，视频等内容。标记语言：由标签构成的语言 HTML运行在浏览器上，HTML标签由浏览器来解析 HTML标签都是预定义好的。例如：使用&lt;img&gt;展示图片 W3...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTML\"><span class=\"toc-text\">HTML</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CSS\"><span class=\"toc-text\">CSS</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#js\"><span class=\"toc-text\">js</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Array\"><span class=\"toc-text\">Array</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String\"><span class=\"toc-text\">String</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">自定义对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BOM\"><span class=\"toc-text\">BOM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#window%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">window对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#history%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">history对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#loaction%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">loaction对象</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DOM\"><span class=\"toc-text\">DOM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96Element%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">获取Element对象</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">事件监听</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">事件绑定</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">常见事件</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">正则表达式</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据结构与算法学习","uid":"6688690e355db1dd869bd788558b9211","slug":"数据结构与算法学习","date":"2022-07-02T01:51:23.000Z","updated":"2022-10-16T06:31:24.966Z","comments":true,"path":"api/articles/数据结构与算法学习.json","keywords":null,"cover":[],"text":"由于之前并未完整成体系的学习算法，在力扣刷100道题后 感觉到算法知识不成体系，决定看左程云的体系学习班学习算法 学习路线 搞定1,2,3差不多达到面试水平 杂记子问题规模一样的递归可以用Master公式求时间复杂度 T(N) &#x3D; a * T(N&#x2F;b) + O...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"算法与数据结构","slug":"算法与数据结构","count":2,"path":"api/tags/算法与数据结构.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Mybatis","uid":"54e1d69dbe01003cc0c2e45b21bc6b3e","slug":"Mybatis","date":"2022-06-07T08:06:27.000Z","updated":"2022-07-26T07:18:33.311Z","comments":true,"path":"api/articles/Mybatis.json","keywords":null,"cover":[],"text":"入门_MyBatis中文网(Mybatis.pdf)什么是Mybatis？ Mybatis是一款优秀的持久层框架，用于简化JDBC开发 官网：https://mybatis.org/mybatis-3/zh/index.html 持久层： 负责将数据保存到数据库的那一层代码 Ja...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
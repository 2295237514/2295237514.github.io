{"title":"数据结构与算法学习","uid":"6688690e355db1dd869bd788558b9211","slug":"数据结构与算法学习","date":"2022-07-02T01:51:23.000Z","updated":"2023-02-18T04:05:27.592Z","comments":true,"path":"api/articles/数据结构与算法学习.json","keywords":null,"cover":[],"content":"<h1 id=\"学习路线\"><a href=\"#学习路线\" class=\"headerlink\" title=\"学习路线\"></a>学习路线</h1><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220702104928.png\"></p>\n<p>搞定1,2,3差不多达到面试水平</p>\n<h1 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h1><p>子问题规模一样的递归可以用Master公式求时间复杂度</p>\n<p>T(N) &#x3D; a * T(N&#x2F;b) + O(N ^ d);</p>\n<p>a:会有几次调用代码</p>\n<p>b:每次调用规模的大小</p>\n<ul>\n<li>如果 log（b , a) &lt; d 时间复杂度为： O(N^d)</li>\n<li>如果log (b , a) &gt; d 时间复杂度为 ： O(N^(log(b,a)))</li>\n<li>如果log（b , a）&#x3D;&#x3D; d 时间复杂度为：O(N^d * log(2,n)))<br>注：log(b,a) 指以b为地a为指数</li>\n</ul>\n<h1 id=\"基础的数据结构\"><a href=\"#基础的数据结构\" class=\"headerlink\" title=\"基础的数据结构\"></a>基础的数据结构</h1><h2 id=\"实现栈和队列\"><a href=\"#实现栈和队列\" class=\"headerlink\" title=\"实现栈和队列\"></a>实现栈和队列</h2><h3 id=\"用数组实现队列\"><a href=\"#用数组实现队列\" class=\"headerlink\" title=\"用数组实现队列\"></a>用数组实现队列</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 给定一个长度被限制数组空间，如何实现队列？\npublic class RingArray&#123;\n    public static class MyQueue&#123;\n        private int[]arr;\n        private int pushi;\n        private int rolli;\n        private int size;\n        private final int limit;\n        \n        public MyQueue(int limit)&#123;\n            arr &#x3D; new int[limit];\n            pushi &#x3D; 0;\n            polli &#x3D; 0;\n            size &#x3D; 0;\n            this.limit &#x3D; limit;\n        &#125;\n        \n        public void push(int value)&#123;\n            if(size &#x3D;&#x3D; limit)&#123;\n                throw new RuntimeException(&quot;队列满了，不能再加了&quot;);\n            &#125;\n            size++;\n            arr[pushi] &#x3D; value;\n            pushi &#x3D; nextIndex(pushi);\n        &#125;\n        \n        public int pop()&#123;\n            if(size &#x3D;&#x3D; 0)&#123;\n                throw new RuntimeException(&quot;队列空了，不能再拿了&quot;);\n            &#125;\n            int ans &#x3D; arr[rolli];\n            rolli &#x3D; nextIndex(rolli);\n            return ans;\n        &#125;\n        \n        public boolean isEmpty()&#123;\n            return size &#x3D;&#x3D; 0;\n        &#125;\n        \n        private int nextIndex(int i)&#123;\n            return i &lt; limit - 1 ? i + 1: 0;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"数组实现一个特殊的栈，可实时返回栈中最小值\"><a href=\"#数组实现一个特殊的栈，可实时返回栈中最小值\" class=\"headerlink\" title=\"数组实现一个特殊的栈，可实时返回栈中最小值\"></a>数组实现一个特殊的栈，可实时返回栈中最小值</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;在基本功能上，再实现返回栈中最小元素的功能，且pop、push、getMin操作的时间复杂度是O(1).\n\n&#x2F;&#x2F;思路：维护一个栈和一个最小值栈，最小栈中存此时栈中的最小值。\n\npublic class GetMinStack &#123;\n\n\tpublic static class MyStack &#123;\n\t\tprivate Stack&lt;Integer&gt; stackData;\n\t\tprivate Stack&lt;Integer&gt; stackMin;\n\n\t\tpublic MyStack2() &#123;\n\t\t\tthis.stackData &#x3D; new Stack&lt;Integer&gt;();\n\t\t\tthis.stackMin &#x3D; new Stack&lt;Integer&gt;();\n\t\t&#125;\n\n\t\tpublic void push(int newNum) &#123;\n\t\t\tif (this.stackMin.isEmpty()) &#123;\n\t\t\t\tthis.stackMin.push(newNum);\n\t\t\t&#125; else if (newNum &lt; this.getmin()) &#123;\n\t\t\t\tthis.stackMin.push(newNum);\n\t\t\t&#125; else &#123;\n\t\t\t\tint newMin &#x3D; this.stackMin.peek();\n\t\t\t\tthis.stackMin.push(newMin);\n\t\t\t&#125;\n\t\t\tthis.stackData.push(newNum);\n\t\t&#125;\n\n\t\tpublic int pop() &#123;\n\t\t\tif (this.stackData.isEmpty()) &#123;\n\t\t\t\tthrow new RuntimeException(&quot;Your stack is empty.&quot;);\n\t\t\t&#125;\n\t\t\tthis.stackMin.pop();\n\t\t\treturn this.stackData.pop();\n\t\t&#125;\n\n\t\tpublic int getmin() &#123;\n\t\t\tif (this.stackMin.isEmpty()) &#123;\n\t\t\t\tthrow new RuntimeException(&quot;Your stack is empty.&quot;);\n\t\t\t&#125;\n\t\t\treturn this.stackMin.peek();\n\t\t&#125;\n\t&#125;\n\n&#125;</code></pre>\n\n<h3 id=\"如何用栈实现队列\"><a href=\"#如何用栈实现队列\" class=\"headerlink\" title=\"如何用栈实现队列\"></a>如何用栈实现队列</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 思路：一个push栈，一个pop栈，把push栈的元素放进pop栈再取出来\n&#x2F;&#x2F; 为保证顺序，1、pop栈不为空时,push栈不能往pop栈里倒元素。2、push栈倒元素需要一次性倒完\n\npublic class TwoStacksImplementQueue &#123;\n\n\tpublic static class TwoStacksQueue &#123;\n\t\tpublic Stack&lt;Integer&gt; stackPush;\n\t\tpublic Stack&lt;Integer&gt; stackPop;\n\n\t\tpublic TwoStacksQueue() &#123;\n\t\t\tstackPush &#x3D; new Stack&lt;Integer&gt;();\n\t\t\tstackPop &#x3D; new Stack&lt;Integer&gt;();\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; push栈向pop栈倒入数据\n\t\tprivate void pushToPop() &#123;\n\t\t\tif (stackPop.empty()) &#123;\n\t\t\t\twhile (!stackPush.empty()) &#123;\n\t\t\t\t\tstackPop.push(stackPush.pop());\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;\n\n\t\tpublic void add(int pushInt) &#123;\n\t\t\tstackPush.push(pushInt);\n\t\t\tpushToPop();\n\t\t&#125;\n\n\t\tpublic int poll() &#123;\n\t\t\tif (stackPop.empty() &amp;&amp; stackPush.empty()) &#123;\n\t\t\t\tthrow new RuntimeException(&quot;Queue is empty!&quot;);\n\t\t\t&#125;\n\t\t\tpushToPop();\n\t\t\treturn stackPop.pop();\n\t\t&#125;\n\n\t\tpublic int peek() &#123;\n\t\t\tif (stackPop.empty() &amp;&amp; stackPush.empty()) &#123;\n\t\t\t\tthrow new RuntimeException(&quot;Queue is empty!&quot;);\n\t\t\t&#125;\n\t\t\tpushToPop();\n\t\t\treturn stackPop.peek();\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"如何用队列实现栈\"><a href=\"#如何用队列实现栈\" class=\"headerlink\" title=\"如何用队列实现栈\"></a>如何用队列实现栈</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;实现poll或peek功能是第一个队列中除最后一个元素依次取出加进另一个队列，剩下的那个就是所需要的元素\npublic class Code07_TwoQueueImplementStack &#123;\n\n\tpublic static class TwoQueueStack&lt;T&gt; &#123;\n\t\tpublic Queue&lt;T&gt; queue;\n\t\tpublic Queue&lt;T&gt; help;\n\n\t\tpublic TwoQueueStack() &#123;\n\t\t\tqueue &#x3D; new LinkedList&lt;&gt;();\n\t\t\thelp &#x3D; new LinkedList&lt;&gt;();\n\t\t&#125;\n\n\t\tpublic void push(T value) &#123;\n\t\t\tqueue.offer(value);\n\t\t&#125;\n\n\t\tpublic T poll() &#123;\n\t\t\twhile (queue.size() &gt; 1) &#123;\n\t\t\t\thelp.offer(queue.poll());\n\t\t\t&#125;\n\t\t\tT ans &#x3D; queue.poll();\n\t\t\tQueue&lt;T&gt; tmp &#x3D; queue;\n\t\t\tqueue &#x3D; help;\n\t\t\thelp &#x3D; tmp;\n\t\t\treturn ans;\n\t\t&#125;\n\n\t\tpublic T peek() &#123;\n\t\t\twhile (queue.size() &gt; 1) &#123;\n\t\t\t\thelp.offer(queue.poll());\n\t\t\t&#125;\n\t\t\tT ans &#x3D; queue.poll();\n\t\t\thelp.offer(ans);\n\t\t\tQueue&lt;T&gt; tmp &#x3D; queue;\n\t\t\tqueue &#x3D; help;\n\t\t\thelp &#x3D; tmp;\n\t\t\treturn ans;\n\t\t&#125;\n\n\t\tpublic boolean isEmpty() &#123;\n\t\t\treturn queue.isEmpty();\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Heap &#123;\n\n\tpublic static class MyMaxHeap &#123;\n\t\tprivate int[] heap;\n\t\tprivate final int limit;\n\t\tprivate int heapSize;\n\n\t\tpublic MyMaxHeap(int limit) &#123;\n\t\t\theap &#x3D; new int[limit];\n\t\t\tthis.limit &#x3D; limit;\n\t\t\theapSize &#x3D; 0;\n\t\t&#125;\n\n\t\tpublic boolean isEmpty() &#123;\n\t\t\treturn heapSize &#x3D;&#x3D; 0;\n\t\t&#125;\n\n\t\tpublic boolean isFull() &#123;\n\t\t\treturn heapSize &#x3D;&#x3D; limit;\n\t\t&#125;\n\n\t\tpublic void push(int value) &#123;\n\t\t\tif (heapSize &#x3D;&#x3D; limit) &#123;\n\t\t\t\tthrow new RuntimeException(&quot;heap is full&quot;);\n\t\t\t&#125;\n\t\t\theap[heapSize] &#x3D; value;\n\t\t\t&#x2F;&#x2F; value heapSize\n\t\t\theapInsert(heap, heapSize++);\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; 返回最大值，并且在大根堆中，把最大值删掉\n\t\t&#x2F;&#x2F; 剩下的数，依然保持大根堆组织\n\t\tpublic int pop() &#123;\n\t\t\tint ans &#x3D; heap[0];\n\t\t\tswap(heap, 0, --heapSize);\n\t\t\theapify(heap, 0, heapSize);\n\t\t\treturn ans;\n\t\t&#125;\n\n\t\tprivate void heapInsert(int[] arr, int index) &#123;\n\t\t\t&#x2F;&#x2F; [index] [index-1]&#x2F;2\n\t\t\t&#x2F;&#x2F; index &#x3D;&#x3D; 0\n\t\t\twhile (arr[index] &gt; arr[(index - 1) &#x2F; 2]) &#123;\n\t\t\t\tswap(arr, index, (index - 1) &#x2F; 2);\n\t\t\t\tindex &#x3D; (index - 1) &#x2F; 2;\n\t\t\t&#125;\n\t\t&#125;\n\n\t\tprivate void heapify(int[] arr, int index, int heapSize) &#123;\n\t\t\tint left &#x3D; index * 2 + 1;\n\t\t\twhile (left &lt; heapSize) &#123; &#x2F;&#x2F; 如果有左孩子，有没有右孩子，可能有可能没有！\n\t\t\t\t&#x2F;&#x2F; 把较大孩子的下标，给largest\n\t\t\t\tint largest &#x3D; left + 1 &lt; heapSize &amp;&amp; arr[left + 1] &gt; arr[left] ? left + 1 : left;\n\t\t\t\tlargest &#x3D; arr[largest] &gt; arr[index] ? largest : index;\n\t\t\t\tif (largest &#x3D;&#x3D; index) &#123;\n\t\t\t\t\tbreak;\n\t\t\t\t&#125;\n\t\t\t\t&#x2F;&#x2F; index和较大孩子，要互换\n\t\t\t\tswap(arr, largest, index);\n\t\t\t\tindex &#x3D; largest;\n\t\t\t\tleft &#x3D; index * 2 + 1;\n\t\t\t&#125;\n\t\t&#125;\n\n\t\tprivate void swap(int[] arr, int i, int j) &#123;\n\t\t\tint tmp &#x3D; arr[i];\n\t\t\tarr[i] &#x3D; arr[j];\n\t\t\tarr[j] &#x3D; tmp;\n\t\t&#125;\n\n\t&#125;\n&#125;</code></pre>\n\n\n\n<h1 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h1><h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>0~N-1上找到最小值与下标为0的值交换</p>\n<p>1~N-1上找到最小值与下标为1的值交换</p>\n<p>2~N-1上找到最小值与下标为2的值交换</p>\n<p>······</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void selectionSort(int[] arr) &#123;\n\t\tif (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;\n\t\t\treturn;\n\t\t&#125;\n\t\t&#x2F;&#x2F; 0 ~ N-1  找到最小值，在哪，放到0位置上\n\t\t&#x2F;&#x2F; 1 ~ n-1  找到最小值，在哪，放到1 位置上\n\t\t&#x2F;&#x2F; 2 ~ n-1  找到最小值，在哪，放到2 位置上\n\t\tfor (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;\n\t\t\tint minIndex &#x3D; i;\n\t\t\tfor (int j &#x3D; i + 1; j &lt; arr.length; j++) &#123; &#x2F;&#x2F; i ~ N-1 上找最小值的下标 \n\t\t\t\tminIndex &#x3D; arr[j] &lt; arr[minIndex] ? j : minIndex;\n\t\t\t&#125;\n\t\t\tswap(arr, i, minIndex);\n\t\t&#125;\n\t&#125;\n\n\tpublic static void swap(int[] arr, int i, int j) &#123;\n\t\tint tmp &#x3D; arr[i];\n\t\tarr[i] &#x3D; arr[j];\n\t\tarr[j] &#x3D; tmp;\n\t&#125;</code></pre>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void bubbleSort(int[] arr) &#123;\n\t\tif (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;\n\t\t\treturn;\n\t\t&#125;\n\t\t&#x2F;&#x2F; 0 ~ N-1\n\t\t&#x2F;&#x2F; 0 ~ N-2\n\t\t&#x2F;&#x2F; 0 ~ N-3\n\t\tfor (int e &#x3D; arr.length - 1; e &gt; 0; e--) &#123; &#x2F;&#x2F; 0 ~ e\n\t\t\tfor (int i &#x3D; 0; i &lt; e; i++) &#123;\n\t\t\t\tif (arr[i] &gt; arr[i + 1]) &#123;\n\t\t\t\t\tswap(arr, i, i + 1);\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F; 交换arr的i和j位置上的值，i和j是一个位置的话，会出错\n\tpublic static void swap(int[] arr, int i, int j) &#123;\n\t\tarr[i] &#x3D; arr[i] ^ arr[j];\n\t\tarr[j] &#x3D; arr[i] ^ arr[j];\n\t\tarr[i] &#x3D; arr[i] ^ arr[j];\n\t&#125;\n</code></pre>\n\n\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void insertionSort(int[] arr) &#123;\n\t\tif (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;\n\t\t\treturn;\n\t\t&#125;\n\t\t&#x2F;&#x2F; 不只1个数\n\t\tfor (int i &#x3D; 1; i &lt; arr.length; i++) &#123; &#x2F;&#x2F; 0 ~ i 做到有序\n\t\t\tfor (int j &#x3D; i - 1; j &gt;&#x3D; 0 &amp;&amp; arr[j] &gt; arr[j + 1]; j--) &#123;\n\t\t\t\tswap(arr, j, j + 1);\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F; i和j是一个位置的话，会出错\n\tpublic static void swap(int[] arr, int i, int j) &#123;\n\t\tarr[i] &#x3D; arr[i] ^ arr[j];\n\t\tarr[j] &#x3D; arr[i] ^ arr[j];\n\t\tarr[i] &#x3D; arr[i] ^ arr[j];\n\t&#125;</code></pre>\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 递归方法实现\n\tpublic static void mergeSort1(int[] arr) &#123;\n\t\tif (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;\n\t\t\treturn;\n\t\t&#125;\n\t\tprocess(arr, 0, arr.length - 1);\n\t&#125;\n\n\t&#x2F;&#x2F; 请把arr[L..R]排有序\n\t&#x2F;&#x2F; l...r N\n\t&#x2F;&#x2F; T(N) &#x3D; 2 * T(N &#x2F; 2) + O(N)\n\t&#x2F;&#x2F; O(N * logN)\n\tpublic static void process(int[] arr, int L, int R) &#123;\n\t\tif (L &#x3D;&#x3D; R) &#123; &#x2F;&#x2F; base case\n\t\t\treturn;\n\t\t&#125;\n\t\tint mid &#x3D; L + ((R - L) &gt;&gt; 1);\n\t\tprocess(arr, L, mid);\n\t\tprocess(arr, mid + 1, R);\n\t\tmerge(arr, L, mid, R);\n\t&#125;\n\n\tpublic static void merge(int[] arr, int L, int M, int R) &#123;\n\t\tint[] help &#x3D; new int[R - L + 1];\n\t\tint i &#x3D; 0;\n\t\tint p1 &#x3D; L;\n\t\tint p2 &#x3D; M + 1;\n\t\twhile (p1 &lt;&#x3D; M &amp;&amp; p2 &lt;&#x3D; R) &#123;\n\t\t\thelp[i++] &#x3D; arr[p1] &lt;&#x3D; arr[p2] ? arr[p1++] : arr[p2++];\n\t\t&#125;\n\t\t&#x2F;&#x2F; 要么p1越界了，要么p2越界了\n\t\twhile (p1 &lt;&#x3D; M) &#123;\n\t\t\thelp[i++] &#x3D; arr[p1++];\n\t\t&#125;\n\t\twhile (p2 &lt;&#x3D; R) &#123;\n\t\t\thelp[i++] &#x3D; arr[p2++];\n\t\t&#125;\n\t\tfor (i &#x3D; 0; i &lt; help.length; i++) &#123;\n\t\t\tarr[L + i] &#x3D; help[i];\n\t\t&#125;\n\t&#125;</code></pre>\n\n<h3 id=\"变形1：\"><a href=\"#变形1：\" class=\"headerlink\" title=\"变形1：\"></a>变形1：</h3><p>给定一个数组，求出每个元素左边比他小的元素之和，再求每个元素左边比他小的元素之和的累加和，要求小于O（N^2）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static int smallSum(int[] arr) &#123;\n\t\tif (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;\n\t\t\treturn 0;\n\t\t&#125;\n\t\treturn process(arr, 0, arr.length - 1);\n\t&#125;\n\n\t&#x2F;&#x2F; arr[L..R]既要排好序，也要求小和返回\n\t&#x2F;&#x2F; 所有merge时，产生的小和，累加\n\t&#x2F;&#x2F; 左 排序   merge\n\t&#x2F;&#x2F; 右 排序  merge\n\t&#x2F;&#x2F; merge\n\tpublic static int process(int[] arr, int l, int r) &#123;\n\t\tif (l &#x3D;&#x3D; r) &#123;\n\t\t\treturn 0;\n\t\t&#125;\n\t\t&#x2F;&#x2F; l &lt; r\n\t\tint mid &#x3D; l + ((r - l) &gt;&gt; 1);\n\t\treturn \n\t\t\t\tprocess(arr, l, mid) \n\t\t\t\t+ \n\t\t\t\tprocess(arr, mid + 1, r) \n\t\t\t\t+ \n\t\t\t\tmerge(arr, l, mid, r);\n\t&#125;\n\n\tpublic static int merge(int[] arr, int L, int m, int r) &#123;\n\t\tint[] help &#x3D; new int[r - L + 1];\n\t\tint i &#x3D; 0;\n\t\tint p1 &#x3D; L;\n\t\tint p2 &#x3D; m + 1;\n\t\tint res &#x3D; 0;\n\t\twhile (p1 &lt;&#x3D; m &amp;&amp; p2 &lt;&#x3D; r) &#123;\n\t\t\tres +&#x3D; arr[p1] &lt; arr[p2] ? (r - p2 + 1) * arr[p1] : 0;&#x2F;&#x2F;就多了这一行代码\n\t\t\thelp[i++] &#x3D; arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];\n\t\t&#125;\n\t\twhile (p1 &lt;&#x3D; m) &#123;\n\t\t\thelp[i++] &#x3D; arr[p1++];\n\t\t&#125;\n\t\twhile (p2 &lt;&#x3D; r) &#123;\n\t\t\thelp[i++] &#x3D; arr[p2++];\n\t\t&#125;\n\t\tfor (i &#x3D; 0; i &lt; help.length; i++) &#123;\n\t\t\tarr[L + i] &#x3D; help[i];\n\t\t&#125;\n\t\treturn res;\n\t&#125;</code></pre>\n\n<h3 id=\"变形2：\"><a href=\"#变形2：\" class=\"headerlink\" title=\"变形2：\"></a>变形2：</h3><p>求逆序对的数量</p>\n<p>给定一个序列有n个数，求n个数中<a href=\"https://so.csdn.net/so/search?q=%E9%80%86%E5%BA%8F&spm=1001.2101.3001.7020\">逆序</a>对的个数，逆序对的定义：i &lt; j &amp;&amp; a[i] &gt; a[j]。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int merge_sort(int a[], int l ,int r)&#123;\n    &#x2F;&#x2F;序列只有一个数\n    if (l &#x3D;&#x3D; r) return 0;\n    &#x2F;&#x2F;递归左边和右边\n    int mid &#x3D; l + r &gt;&gt; 1;\n    int res &#x3D; merge_sort(a, l , mid) + merge_sort(a, mid + 1, r);\n    &#x2F;&#x2F;归并的过程\n    int i &#x3D; l , j &#x3D; mid + 1, k &#x3D; 0;\n    while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r)&#123;\n        if (a[i] &lt;&#x3D; a[j]) t[k++] &#x3D; a[i++];\n        else&#123;\n            t[k++] &#x3D; a[j++];\n            res +&#x3D; mid - i + 1;\n        &#125;\n    &#125;\n    while (i &lt;&#x3D; mid) t[k++] &#x3D; a[i++];\n    while (j &lt;&#x3D; r) t[k++] &#x3D; a[j++];\n    \n    &#x2F;&#x2F;还原数组\n    for (int i &#x3D; 0 , j &#x3D; l ; j &lt;&#x3D; r ; i ++ , j ++) a[j] &#x3D; t[i];\n    \n    return res;\n&#125;\n</code></pre>\n\n<h3 id=\"变形3：\"><a href=\"#变形3：\" class=\"headerlink\" title=\"变形3：\"></a>变形3：</h3><p><a href=\"https://leetcode.cn/problems/reverse-pairs/\">翻转对</a></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Solution &#123;\n   public static int reversePairs(int[] nums) &#123;\n\t\tif (nums &#x3D;&#x3D; null || nums.length &lt; 2) &#123;\n\t\t\treturn 0;\n\t\t&#125;\n\t\treturn process(nums, 0, nums.length - 1);\n\t&#125;\n\n\tpublic static int process(int[] nums, int l, int r) &#123;\n\t\tif (l &#x3D;&#x3D; r) &#123;\n\t\t\treturn 0;\n\t\t&#125;\n\t\t&#x2F;&#x2F; l &lt; r\n\t\tint mid &#x3D; l + ((r - l) &gt;&gt; 1);\n\t\treturn process(nums, l, mid) + process(nums, mid + 1, r) + merge(nums, l, mid, r);\n\t&#125;\n\n\tpublic static int merge(int[] nums, int L, int m, int r) &#123;\n\t\t&#x2F;&#x2F; [L....M] [M+1....R]\n\t\tint ans &#x3D; 0;\n\t\tint windowR &#x3D; m + 1;\n\t\tfor (int i &#x3D; L; i &lt;&#x3D; m; i++) &#123;\n\t\t\twhile (windowR &lt;&#x3D; r &amp;&amp; (long) nums[i] &gt; (long) nums[windowR] * 2) &#123;\n\t\t\t\twindowR++;\n\t\t\t&#125;\n\t\t\tans +&#x3D; windowR - m - 1;\n\t\t&#125;\n\t\tint[] help &#x3D; new int[r - L + 1];\n\t\tint i &#x3D; 0;\n\t\tint p1 &#x3D; L;\n\t\tint p2 &#x3D; m + 1;\n\t\twhile (p1 &lt;&#x3D; m &amp;&amp; p2 &lt;&#x3D; r) &#123;\n\t\t\thelp[i++] &#x3D; nums[p1] &lt;&#x3D; nums[p2] ? nums[p1++] : nums[p2++];\n\t\t&#125;\n\t\twhile (p1 &lt;&#x3D; m) &#123;\n\t\t\thelp[i++] &#x3D; nums[p1++];\n\t\t&#125;\n\t\twhile (p2 &lt;&#x3D; r) &#123;\n\t\t\thelp[i++] &#x3D; nums[p2++];\n\t\t&#125;\n\t\tfor (i &#x3D; 0; i &lt; help.length; i++) &#123;\n\t\t\tnums[L + i] &#x3D; help[i];\n\t\t&#125;\n\t\treturn ans;\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HeapSort&#123;\n    public static void heapSort(int[] arr) &#123;\n\t\tif (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;\n\t\t\treturn;\n\t\t&#125;\n\t\tfor (int i &#x3D; 0; i &lt; arr.length; i++) &#123; &#x2F;&#x2F; O(N)\n\t\t\theapInsert(arr, i); &#x2F;&#x2F; O(logN)\n\t\t&#125;\n\t\t&#x2F;&#x2F; O(N)\n&#x2F;&#x2F;\t\tfor (int i &#x3D; arr.length - 1; i &gt;&#x3D; 0; i--) &#123;\n&#x2F;&#x2F;\t\t\theapify(arr, i, arr.length);\n&#x2F;&#x2F;\t\t&#125;\n\t\tint heapSize &#x3D; arr.length;\n\t\tswap(arr, 0, --heapSize);\n\t\twhile (heapSize &gt; 0) &#123; &#x2F;&#x2F; O(N) \n\t\t\theapify(arr, 0, heapSize); &#x2F;&#x2F; O(logN)\n\t\t\tswap(arr, 0, --heapSize); &#x2F;&#x2F; O(1)\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F; arr[index]刚来的数，往上\n\tpublic static void heapInsert(int[] arr, int index) &#123;\n\t\twhile (arr[index] &gt; arr[(index - 1) &#x2F; 2]) &#123;\n\t\t\tswap(arr, index, (index - 1) &#x2F; 2);\n\t\t\tindex &#x3D; (index - 1) &#x2F; 2;\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F; arr[index]位置的数，能否往下移动\n\tpublic static void heapify(int[] arr, int index, int heapSize) &#123;\n\t\tint left &#x3D; index * 2 + 1; &#x2F;&#x2F; 左孩子的下标\n\t\twhile (left &lt; heapSize) &#123; &#x2F;&#x2F; 下方还有孩子的时候\n\t\t\t&#x2F;&#x2F; 两个孩子中，谁的值大，把下标给largest\n\t\t\tint largest &#x3D; left + 1 &lt; heapSize &amp;&amp; arr[left + 1] &gt; arr[left] ? left + 1 : left;\n\t\t\t&#x2F;&#x2F; 父和较大的孩子之间，谁的值大，把下标给largest\n\t\t\tlargest &#x3D; arr[largest] &gt; arr[index] ? largest : index;\n\t\t\tif (largest &#x3D;&#x3D; index) &#123;\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t\tswap(arr, largest, index);\n\t\t\tindex &#x3D; largest;\n\t\t\tleft &#x3D; index * 2 + 1;\n\t\t&#125;\n\t&#125;\n\n\tpublic static void swap(int[] arr, int i, int j) &#123;\n\t\tint tmp &#x3D; arr[i];\n\t\tarr[i] &#x3D; arr[j];\n\t\tarr[j] &#x3D; tmp;\n\t&#125;\n&#125;</code></pre>\n\n\n\n<h1 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">int a &#x3D; 7;\nint b &#x3D; -a &#x3D; (~a) + 1 &#x3D; -7;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; arr中，只有一种数，出现奇数次\npublic static void printOddTimesNum1(int[] arr) &#123;\n\tint eor &#x3D; 0;\n\tfor (int i &#x3D; 0; i &lt; arr.length; i++) &#123;\n\t\teor ^&#x3D; arr[i];\n\t&#125;\n\tSystem.out.println(eor);\n&#125;\n\n&#x2F;&#x2F; arr中，有两种数，出现奇数次\npublic static void printOddTimesNum2(int[] arr) &#123;\n\tint eor &#x3D; 0;\n\tfor (int i &#x3D; 0; i &lt; arr.length; i++) &#123;\n\t\teor ^&#x3D; arr[i];\n\t&#125;\n\t&#x2F;&#x2F; a 和 b是两种数\n\t&#x2F;&#x2F; eor !&#x3D; 0\n\t&#x2F;&#x2F; eor最右侧的1，提取出来\n\t&#x2F;&#x2F; eor :     00110010110111000\n\t&#x2F;&#x2F; rightOne :00000000000001000\n\tint rightOne &#x3D; eor &amp; (-eor); &#x2F;&#x2F; 提取出最右的1\n\t\n\t\n\tint onlyOne &#x3D; 0; &#x2F;&#x2F; eor&#39;\n\tfor (int i &#x3D; 0 ; i &lt; arr.length;i++) &#123;\n\t\t&#x2F;&#x2F;  arr[1] &#x3D;  111100011110000\n\t\t&#x2F;&#x2F; rightOne&#x3D;  000000000010000\n\t\tif ((arr[i] &amp; rightOne) !&#x3D; 0) &#123;\n\t\t\tonlyOne ^&#x3D; arr[i];\n\t\t&#125;\n\t&#125;\n\tSystem.out.println(onlyOne + &quot; &quot; + (eor ^ onlyOne));\n&#125;\n   &#x2F;&#x2F; 输入一定能够保证，数组中所有的数都出现了M次，只有一种数出现了K次\n   &#x2F;&#x2F; 1 &lt;&#x3D; K &lt; M\n   &#x2F;&#x2F; 返回这种数\n   public static int km(int[] arr, int k, int m) &#123;\n       int[] help &#x3D; new int[32];\n       for (int num : arr) &#123;\n           for (int i &#x3D; 0; i &lt; 32; i++) &#123;\n               help[i] +&#x3D; (num &gt;&gt; i) &amp; 1;\n           &#125;\n       &#125;\n       int ans &#x3D; 0;\n       for (int i &#x3D; 0; i &lt; 32; i++) &#123;\n           help[i] %&#x3D; m;\n           if (help[i] !&#x3D; 0) &#123;\n               ans |&#x3D; 1 &lt;&lt; i;\n           &#125;\n       &#125;\n       return ans;\n   &#125;</code></pre>\n\n<h1 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h1>","text":"学习路线 搞定1,2,3差不多达到面试水平 杂记子问题规模一样的递归可以用Master公式求时间复杂度 T(N) &#x3D; a * T(N&#x2F;b) + O(N ^ d); a:会有几次调用代码 b:每次调用规模的大小 如果 log（b , a) &lt; d 时间复杂...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"算法与数据结构","slug":"算法与数据结构","count":2,"path":"api/tags/算法与数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF\"><span class=\"toc-text\">学习路线</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9D%82%E8%AE%B0\"><span class=\"toc-text\">杂记</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">基础的数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97\"><span class=\"toc-text\">实现栈和队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97\"><span class=\"toc-text\">用数组实现队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%89%B9%E6%AE%8A%E7%9A%84%E6%A0%88%EF%BC%8C%E5%8F%AF%E5%AE%9E%E6%97%B6%E8%BF%94%E5%9B%9E%E6%A0%88%E4%B8%AD%E6%9C%80%E5%B0%8F%E5%80%BC\"><span class=\"toc-text\">数组实现一个特殊的栈，可实时返回栈中最小值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97\"><span class=\"toc-text\">如何用栈实现队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88\"><span class=\"toc-text\">如何用队列实现栈</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">堆</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">选择排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">冒泡排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">插入排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">归并排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E5%BD%A21%EF%BC%9A\"><span class=\"toc-text\">变形1：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E5%BD%A22%EF%BC%9A\"><span class=\"toc-text\">变形2：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E5%BD%A23%EF%BC%9A\"><span class=\"toc-text\">变形3：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">堆排序</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">位运算</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">二叉树</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Leetcode高频题总结","uid":"711e99b247f8f70b0f4cf84df30732b2","slug":"Leetcode高频题总结","date":"2022-07-05T03:05:06.000Z","updated":"2022-11-21T03:16:48.125Z","comments":true,"path":"api/articles/Leetcode高频题总结.json","keywords":null,"cover":null,"text":"剑指Offer06 从尾到头打印链表class Solution &#123; int i; int j; int[] res; public int[] reversePrint(ListNode head) &#123; solve(head); return res; &#...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"算法与数据结构","slug":"算法与数据结构","count":2,"path":"api/tags/算法与数据结构.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"前端三件套","uid":"d75b47533ffd84933c1aac3f8bde1caa","slug":"前端三件套基础入门","date":"2022-06-30T02:44:09.000Z","updated":"2022-07-06T06:13:51.796Z","comments":true,"path":"api/articles/前端三件套基础入门.json","keywords":null,"cover":[],"text":"HTMLHTML：超文本标记语言超文本：超越了文本的的限制，比普通文本更强大，除了文字信息，还可以定义图片，音频，视频等内容。标记语言：由标签构成的语言 HTML运行在浏览器上，HTML标签由浏览器来解析 HTML标签都是预定义好的。例如：使用&lt;img&gt;展示图片 W3...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
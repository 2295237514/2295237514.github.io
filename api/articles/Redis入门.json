{"title":"Redis入门","uid":"9d6afd20d8190b4b550aed150e5e2779","slug":"Redis入门","date":"2023-01-09T02:59:24.000Z","updated":"2023-01-09T09:37:37.426Z","comments":true,"path":"api/articles/Redis入门.json","keywords":null,"cover":[],"content":"<h1 id=\"NOSQL\"><a href=\"#NOSQL\" class=\"headerlink\" title=\"NOSQL\"></a>NOSQL</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>1.解决CPU及内存压力</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109124222.png\"></p>\n<p>2.解决IO压力</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109124425.png\"></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>NoSQL(NoSQL &#x3D; <strong>Not Only SQL</strong> )，意即“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。 </p>\n<p>NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p>\n<p>1.不遵循SQL标准。</p>\n<p>2.不支持ACID。</p>\n<p>3.远超于SQL的性能。</p>\n<p><strong>NoSQL</strong>适用场景 </p>\n<p>1.对数据高并发的读写</p>\n<p>2.海量数据的读写</p>\n<p>3.对数据高可扩展性的</p>\n<p><strong>NoSQL</strong>不适用场景</p>\n<p>1.需要事务支持</p>\n<p>2.基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</p>\n<p>3.<em>（用不着sql的和用了sql也不行的情况，请考虑用NoSq）</em></p>\n<h1 id=\"常用五大数据类型\"><a href=\"#常用五大数据类型\" class=\"headerlink\" title=\"常用五大数据类型\"></a>常用五大数据类型</h1><h2 id=\"Redis键\"><a href=\"#Redis键\" class=\"headerlink\" title=\"Redis键\"></a>Redis键</h2><p>keys *查看当前库所有key  (匹配：keys *1)</p>\n<p>exists key 判断某个key是否存在</p>\n<p>type key 查看你的key是什么类型</p>\n<p>del key    删除指定的key数据</p>\n<p><strong>unlink key  根据value选择非阻塞删除</strong></p>\n<p><strong>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</strong></p>\n<p>expire key 10  10秒钟：为给定的key设置过期时间</p>\n<p>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</p>\n<p>select 命令切换数据库</p>\n<p>dbsize 查看当前数据库的key的数量</p>\n<p>flushdb 清空当前库</p>\n<p>flushall 通杀全部库</p>\n<h2 id=\"Redis字符串-String\"><a href=\"#Redis字符串-String\" class=\"headerlink\" title=\"Redis字符串(String)\"></a>Redis字符串(String)</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p>\n<p>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p>\n<p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>set  <key><value>添加键值对</p>\n<p>*NX：当数据库中key不存在时，可以将key-value添加数据库</p>\n<p>*XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</p>\n<p>*EX：key的超时秒数</p>\n<p>*PX：key的超时毫秒数，与EX互斥</p>\n<p>get  <key>查询对应键值</p>\n<p>append <key><value>将给定的<value> 追加到原值的末尾</p>\n<p>strlen <key>获得值的长度</p>\n<p>setnx <key><value>只有在 key 不存在时  设置 key 的值</p>\n<p>incr <key></p>\n<p>将 key 中储存的数字值增1</p>\n<p>只能对数字值操作，如果为空，新增值为1</p>\n<p>decr <key></p>\n<p>将 key 中储存的数字值减1</p>\n<p>只能对数字值操作，如果为空，新增值为-1</p>\n<p>incrby &#x2F; decrby <key>&lt;步长&gt;将 key 中储存的数字值增减。自定义步长。</p>\n<p>mset <key1><value1><key2><value2> ….. </p>\n<p>同时设置一个或多个 key-value对 </p>\n<p>mget <key1><key2><key3> …..</p>\n<p>同时获取一个或多个 value </p>\n<p>msetnx <key1><value1><key2><value2> ….. </p>\n<p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p>\n<p><strong>由于原子性，有一个失败则都失败</strong></p>\n<p>getrange <key>&lt;起始位置&gt;&lt;结束位置&gt;</p>\n<p>获得值的范围，类似java中的substring，<strong>前包，后包</strong></p>\n<p>setrange <key>&lt;起始位置&gt;<value></p>\n<p>用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)。</p>\n<p><strong>setex <key>&lt;过期时间&gt;<value></strong></p>\n<p>设置键值的同时，设置过期时间，单位秒。</p>\n<p>getset <key><value></p>\n<p>以新换旧，设置了新值同时获得旧值。</p>\n<h3 id=\"Java-中的-i-是原子操作吗？\"><a href=\"#Java-中的-i-是原子操作吗？\" class=\"headerlink\" title=\"Java 中的 i++ 是原子操作吗？\"></a>Java 中的 i++ 是原子操作吗？</h3><p>不是原子操作</p>\n<p>所谓原子操作是指不会被线程调度机制打断的操作，这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）</p>\n<p>在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间<br>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作</p>\n<p>Redis 单命令的原子性主要得益于 Redis 的单线程</p>\n<h3 id=\"给定-i-x3D-0，两个线程分别执行-i-100次，值是多少？\"><a href=\"#给定-i-x3D-0，两个线程分别执行-i-100次，值是多少？\" class=\"headerlink\" title=\"给定 i &#x3D; 0，两个线程分别执行 i++ 100次，值是多少？\"></a><strong>给定 i &#x3D; 0，两个线程分别执行 i++ 100次，值是多少？</strong></h3><p>2~200</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p>\n<p>内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p>\n<h2 id=\"Redis列表-List\"><a href=\"#Redis列表-List\" class=\"headerlink\" title=\"Redis列表(List)\"></a>Redis列表(List)</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>单键多值</p>\n<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p>\n<h3 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>lpush&#x2F;rpush <key><value1><value2><value3> …. 从左边&#x2F;右边插入一个或多个值。</p>\n<p>lpop&#x2F;rpop <key>从左边&#x2F;右边吐出一个值。值在键在，值光键亡。</p>\n<p>rpop|push <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边。</p>\n<p>lrange <key><start><stop></p>\n<p>按照索引下标获得元素(从左到右)</p>\n<p>lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）</p>\n<p>lindex <key><index>按照索引下标获得元素(从左到右)</p>\n<p>llen <key>获得列表长度 </p>\n<p>linsert <key> before <value><newvalue>在<value>的后面插入<newvalue>插入值</p>\n<p>lrem <key><n><value>从左边删除n个value(从左到右)</p>\n<p>lset<key><index><value>将列表key下标为index的值替换成value</p>\n<h3 id=\"数据结构-1\"><a href=\"#数据结构-1\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>List的数据结构为快速链表quickList。</p>\n<p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p>\n<p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p>\n<p>当数据量比较多的时候才会改成quicklist。</p>\n<p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p>\n<p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>\n<h2 id=\"Redis集合-Set\"><a href=\"#Redis集合-Set\" class=\"headerlink\" title=\"Redis集合(Set)\"></a>Redis集合(Set)</h2><h3 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p>\n<p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的*<em>复杂度都是</em>***O(1)**。</p>\n<p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p>\n<h3 id=\"常用命令-2\"><a href=\"#常用命令-2\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>sadd <key><value1><value2> ….. </p>\n<p>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p>\n<p>smembers <key>取出该集合的所有值。</p>\n<p>sismember <key><value>判断集合<key>是否为含有该<value>值，有1，没有0</p>\n<p>scard<key>返回该集合的元素个数。</p>\n<p>srem <key><value1><value2> …. 删除集合中的某个元素。</p>\n<p>spop <key><strong>随机从该集合中吐出一个值。</strong></p>\n<p>srandmember <key><n>随机从该集合中取出n个值。不会从集合中删除 。</p>\n<p>smove <source><destination>value把集合中一个值从一个集合移动到另一个集合</p>\n<p>sinter <key1><key2>返回两个集合的交集元素。</p>\n<p>sunion <key1><key2>返回两个集合的并集元素。</p>\n<p>sdiff <key1><key2>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</p>\n<h3 id=\"数据结构-2\"><a href=\"#数据结构-2\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>Set数据结构是dict字典，字典是用哈希表实现的。</p>\n<p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p>\n<h2 id=\"Redis哈希-Hash\"><a href=\"#Redis哈希-Hash\" class=\"headerlink\" title=\"Redis哈希(Hash)\"></a>Redis哈希(Hash)</h2><h3 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Redis hash 是一个键值对集合。</p>\n<p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>\n<p>类似Java里面的Map&lt;String,Object&gt;</p>\n<p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key&#x2F;value结构来存储</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109152514.png\"></p>\n<h3 id=\"常用命令-3\"><a href=\"#常用命令-3\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p> hset <key><field><value>给<key>集合中的 <field>键赋值<value></p>\n<p>hget <key1><field>从<key1>集合<field>取出 value </p>\n<p>hset <key1><field1><value1><field2><value2>… 批量设置hash的值</p>\n<p>hexists<key1><field>查看哈希表 key 中，给定域 field 是否存在。 </p>\n<p>hkeys <key>列出该hash集合的所有field</p>\n<p>hvals <key>列出该hash集合的所有value</p>\n<p>hincrby <key><field><increment>为哈希表 key 中的域 field 的值加上增量 1  -1</p>\n<p>hsetnx <key><field><value>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</p>\n<h3 id=\"数据结构-3\"><a href=\"#数据结构-3\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable</p>\n<h2 id=\"Redis有序集合-Zset\"><a href=\"#Redis有序集合-Zset\" class=\"headerlink\" title=\"Redis有序集合(Zset)\"></a>Redis有序集合(Zset)</h2><h3 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p>\n<p>不同之处是有序集合的每个成员都关联了一个<strong>评分（<strong><strong>score</strong></strong>）</strong>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p>\n<p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p>\n<p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p>\n<h3 id=\"常用命令-4\"><a href=\"#常用命令-4\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>zadd <key><score1><value1><score2><value2>…</p>\n<p>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</p>\n<p><strong>zrange <key><start><stop> [WITHSCORES]</strong>  </p>\n<p>返回有序集 key 中，下标在<start><stop>之间的元素</p>\n<p>带WITHSCORES，可以让分数一起和值返回到结果集。</p>\n<p>zrangebyscore key minmax [withscores] [limit offset count]</p>\n<p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </p>\n<p>zrevrangebyscore key maxmin [withscores] [limit offset count]        </p>\n<p>同上，改为从大到小排列。 </p>\n<p>zincrby <key><increment><value>   为元素的score加上增量</p>\n<p>zrem <key><value>删除该集合下，指定值的元素</p>\n<p>zcount <key><min><max>统计该集合，分数区间内的元素个数 </p>\n<p>zrank <key><value>返回该值在集合中的排名，从0开始。</p>\n<h3 id=\"数据结构-4\"><a href=\"#数据结构-4\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p>\n<p>zset底层使用了两个数据结构</p>\n<p>（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p>\n<p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p>\n<h3 id=\"跳表\"><a href=\"#跳表\" class=\"headerlink\" title=\"跳表\"></a>跳表</h3><p>1、简介</p>\n<p>  有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p>\n<p>2、实例</p>\n<p>  对比有序链表和跳跃表，从链表中查询出51</p>\n<p>（1）  有序链表</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109153652.png\"></p>\n<p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p>\n<p>（2）  跳表</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109153746.png\"></p>\n<p>从第2层开始，1节点比51节点小，向后比较。</p>\n<p>21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</p>\n<p>在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</p>\n<p>在第0层，51节点为要查找的节点，节点被找到，共查找4次。</p>\n<p>从此可以看出跳跃表比有序链表效率要高</p>\n<h1 id=\"Redis的三种新数据类型\"><a href=\"#Redis的三种新数据类型\" class=\"headerlink\" title=\"Redis的三种新数据类型\"></a>Redis的三种新数据类型</h1><h2 id=\"Bitmaps\"><a href=\"#Bitmaps\" class=\"headerlink\" title=\"Bitmaps\"></a>Bitmaps</h2><h3 id=\"简介-5\"><a href=\"#简介-5\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109163458.png\"></p>\n<p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p>\n<p>   Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p>\n<p>（1）  Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p>\n<p>（2）  Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109163727.png\"></p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>1、setbit</p>\n<p>（1）格式</p>\n<p>setbit<key><offset><value>设置Bitmaps中某个偏移量的值（0或1）</p>\n<p>*offset:偏移量从0开始</p>\n<p>（2）实例</p>\n<p>每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p>\n<p>设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid&#x3D;1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109164052.png\"></p>\n<p>unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109164158.png\"></p>\n<p>注：</p>\n<p>很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p>\n<p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p>\n<p>2、getbit</p>\n<p>（1）格式</p>\n<p>getbit<key><offset>获取Bitmaps中某个偏移量的值</p>\n<p>获取键的第offset位的值（从0开始算）</p>\n<p>（2）实例</p>\n<p>获取id&#x3D;8的用户是否在2020-11-06这天访问过， 返回0说明没有访问过：</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109164254.png\"></p>\n<p>注：因为100根本不存在，所以也是返回0</p>\n<p>3、bitcount</p>\n<p>统计<strong>字符串</strong>被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</p>\n<p>（1）格式</p>\n<p>bitcount<key>[start end] 统计字符串从start字节到end字节比特值为1的数量</p>\n<p>举例： K1 【01000001 01000000 00000000 00100001】，对应【0，1，2，3】</p>\n<p>bitcount K1 1 2 ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000 00000000</p>\n<p>–》bitcount K1 1 2 　　–》1</p>\n<p>bitcount K1 1 3 ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000 00000000 00100001</p>\n<p>–》bitcount K1 1 3　　–》3</p>\n<p>bitcount K1 0 -2 ： 统计下标0到下标倒数第2，字节组中bit&#x3D;1的个数，即01000001 01000000  00000000</p>\n<p>–》bitcount K1 0 -2　　–》3</p>\n<p> 注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p>\n<p>4、bitop</p>\n<p>(1)格式</p>\n<p>bitop and(or&#x2F;not&#x2F;xor) <destkey> [key…]</p>\n<p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p>\n<h3 id=\"Bitmaps与set对比\"><a href=\"#Bitmaps与set对比\" class=\"headerlink\" title=\"Bitmaps与set对比\"></a>Bitmaps与set对比</h3><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109171809.png\"></p>\n<h2 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h2><h3 id=\"简介-6\"><a href=\"#简介-6\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p>\n<p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p>\n<p>解决基数问题有很多种方案：</p>\n<p>（1）数据存储在MySQL表中，使用distinct count计算不重复个数</p>\n<p>（2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p>\n<p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p>\n<p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p>\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p>\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\n<p>什么是基数?</p>\n<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>\n<h3 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>1、pfadd </p>\n<p>（1）格式</p>\n<p>pfadd <key>&lt; element&gt; [element …]  添加指定元素到 HyperLogLog 中</p>\n<p>将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p>\n<p>2、pfcount</p>\n<p>（1）格式</p>\n<p>pfcount<key> [key …] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p>\n<p>3、pfmerge</p>\n<p>（1）格式</p>\n<p>pfmerge<destkey><sourcekey> [sourcekey …] 将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p>\n<h2 id=\"Geospatial\"><a href=\"#Geospatial\" class=\"headerlink\" title=\"Geospatial\"></a>Geospatial</h2><h3 id=\"简介-7\"><a href=\"#简介-7\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p>\n<h3 id=\"命令-2\"><a href=\"#命令-2\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>1、geoadd</p>\n<p>（1）格式</p>\n<p>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]  添加地理位置（经度，纬度，名称）</p>\n<p>2、geopos </p>\n<p>（1）格式</p>\n<p>geopos <key><member> [member…] 获得指定地区的坐标值</p>\n<p>3、geodist</p>\n<p>（1）格式</p>\n<p>geodist<key><member1><member2> [m|km|ft|mi ] 获取两个位置之间的直线距离</p>\n<p>4、georadius</p>\n<p>（1）格式</p>\n<p>georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi  以给定的经纬度为中心，找出某一半径内的元素</p>\n<h1 id=\"Redis的发布和订阅\"><a href=\"#Redis的发布和订阅\" class=\"headerlink\" title=\"Redis的发布和订阅\"></a>Redis的发布和订阅</h1><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109161525.png\"></p>\n","feature":true,"text":"NOSQL优点1.解决CPU及内存压力 2.解决IO压力 概述NoSQL(NoSQL &#x3D; Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。 NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#NOSQL\"><span class=\"toc-text\">NOSQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">常用五大数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E9%94%AE\"><span class=\"toc-text\">Redis键</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E5%AD%97%E7%AC%A6%E4%B8%B2-String\"><span class=\"toc-text\">Redis字符串(String)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E4%B8%AD%E7%9A%84-i-%E6%98%AF%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">Java 中的 i++ 是原子操作吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%99%E5%AE%9A-i-x3D-0%EF%BC%8C%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%88%86%E5%88%AB%E6%89%A7%E8%A1%8C-i-100%E6%AC%A1%EF%BC%8C%E5%80%BC%E6%98%AF%E5%A4%9A%E5%B0%91%EF%BC%9F\"><span class=\"toc-text\">给定 i &#x3D; 0，两个线程分别执行 i++ 100次，值是多少？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E5%88%97%E8%A1%A8-List\"><span class=\"toc-text\">Redis列表(List)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B-1\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-1\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E9%9B%86%E5%90%88-Set\"><span class=\"toc-text\">Redis集合(Set)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B-2\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-2\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E5%93%88%E5%B8%8C-Hash\"><span class=\"toc-text\">Redis哈希(Hash)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B-3\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-3\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88-Zset\"><span class=\"toc-text\">Redis有序集合(Zset)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B-4\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-4\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-4\"><span class=\"toc-text\">数据结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8\"><span class=\"toc-text\">跳表</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Redis的三种新数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Bitmaps\"><span class=\"toc-text\">Bitmaps</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B-5\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bitmaps%E4%B8%8Eset%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">Bitmaps与set对比</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HyperLogLog\"><span class=\"toc-text\">HyperLogLog</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B-6\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4-1\"><span class=\"toc-text\">命令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Geospatial\"><span class=\"toc-text\">Geospatial</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B-7\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4-2\"><span class=\"toc-text\">命令</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Redis%E7%9A%84%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">Redis的发布和订阅</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Java集合框架","uid":"de47803b5d69541ea546c3889eeeba14","slug":"Java集合框架","date":"2022-11-20T08:41:47.000Z","updated":"2022-11-24T04:04:31.750Z","comments":true,"path":"api/articles/Java集合框架.json","keywords":null,"cover":[],"text":"集合概述 概念：对象的容器，定义了对多个对象进项操作的的常用方法。可实现数组的功能。 和数组的区别： 数组长度固定，集合长度不固定。 数组可以存储基本类型和引用类型，集合只能存储引用类型。 位置： java.util.*; Collection Collection父接口 特点：...","link":"","photos":[],"count_time":{"symbolsCount":520,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}
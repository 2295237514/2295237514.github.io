{"title":"Redis入门","uid":"9d6afd20d8190b4b550aed150e5e2779","slug":"Redis入门","date":"2023-01-09T02:59:24.000Z","updated":"2023-01-09T06:23:42.704Z","comments":true,"path":"api/articles/Redis入门.json","keywords":null,"cover":[],"content":"<h1 id=\"NOSQL\"><a href=\"#NOSQL\" class=\"headerlink\" title=\"NOSQL\"></a>NOSQL</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>1.解决CPU及内存压力</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109124222.png\"></p>\n<p>2.解决IO压力</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20230109124425.png\"></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>NoSQL(NoSQL &#x3D; <strong>Not Only SQL</strong> )，意即“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。 </p>\n<p>NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p>\n<p>1.不遵循SQL标准。</p>\n<p>2.不支持ACID。</p>\n<p>3.远超于SQL的性能。</p>\n<p><strong>NoSQL</strong>适用场景 </p>\n<p>1.对数据高并发的读写</p>\n<p>2.海量数据的读写</p>\n<p>3.对数据高可扩展性的</p>\n<p><strong>NoSQL</strong>不适用场景</p>\n<p>1.需要事务支持</p>\n<p>2.基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</p>\n<p>3.<em>（用不着sql的和用了sql也不行的情况，请考虑用NoSq）</em></p>\n<h2 id=\"常用五大数据类型\"><a href=\"#常用五大数据类型\" class=\"headerlink\" title=\"常用五大数据类型\"></a>常用五大数据类型</h2><h3 id=\"Redis键\"><a href=\"#Redis键\" class=\"headerlink\" title=\"Redis键\"></a>Redis键</h3><p>keys *查看当前库所有key  (匹配：keys *1)</p>\n<p>exists key 判断某个key是否存在</p>\n<p>type key 查看你的key是什么类型</p>\n<p>del key    删除指定的key数据</p>\n<p><strong>unlink key  根据value选择非阻塞删除</strong></p>\n<p><strong>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</strong></p>\n<p>expire key 10  10秒钟：为给定的key设置过期时间</p>\n<p>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</p>\n<p>select 命令切换数据库</p>\n<p>dbsize 查看当前数据库的key的数量</p>\n<p>flushdb 清空当前库</p>\n<p>flushall 通杀全部库</p>\n<h3 id=\"Redis字符串-String\"><a href=\"#Redis字符串-String\" class=\"headerlink\" title=\"Redis字符串(String)\"></a>Redis字符串(String)</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p>\n<p>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p>\n<p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p>set  <key><value>添加键值对</p>\n<p>*NX：当数据库中key不存在时，可以将key-value添加数据库</p>\n<p>*XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</p>\n<p>*EX：key的超时秒数</p>\n<p>*PX：key的超时毫秒数，与EX互斥</p>\n<p>get  <key>查询对应键值</p>\n<p>append <key><value>将给定的<value> 追加到原值的末尾</p>\n<p>strlen <key>获得值的长度</p>\n<p>setnx <key><value>只有在 key 不存在时  设置 key 的值</p>\n<p>incr <key></p>\n<p>将 key 中储存的数字值增1</p>\n<p>只能对数字值操作，如果为空，新增值为1</p>\n<p>decr <key></p>\n<p>将 key 中储存的数字值减1</p>\n<p>只能对数字值操作，如果为空，新增值为-1</p>\n<p>incrby &#x2F; decrby <key>&lt;步长&gt;将 key 中储存的数字值增减。自定义步长。</p>\n<p>mset <key1><value1><key2><value2> ….. </p>\n<p>同时设置一个或多个 key-value对 </p>\n<p>mget <key1><key2><key3> …..</p>\n<p>同时获取一个或多个 value </p>\n<p>msetnx <key1><value1><key2><value2> ….. </p>\n<p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p>\n<p><strong>由于原子性，有一个失败则都失败</strong></p>\n<p>getrange <key>&lt;起始位置&gt;&lt;结束位置&gt;</p>\n<p>获得值的范围，类似java中的substring，<strong>前包，后包</strong></p>\n<p>setrange <key>&lt;起始位置&gt;<value></p>\n<p>用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)。</p>\n<p><strong>setex <key>&lt;过期时间&gt;<value></strong></p>\n<p>设置键值的同时，设置过期时间，单位秒。</p>\n<p>getset <key><value></p>\n<p>以新换旧，设置了新值同时获得旧值。</p>\n<h4 id=\"Java-中的-i-是原子操作吗？\"><a href=\"#Java-中的-i-是原子操作吗？\" class=\"headerlink\" title=\"Java 中的 i++ 是原子操作吗？\"></a>Java 中的 i++ 是原子操作吗？</h4><p>不是原子操作</p>\n<p>所谓原子操作是指不会被线程调度机制打断的操作，这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）</p>\n<p>在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间<br>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作</p>\n<p>Redis 单命令的原子性主要得益于 Redis 的单线程</p>\n<h4 id=\"给定-i-x3D-0，两个线程分别执行-i-100次，值是多少？\"><a href=\"#给定-i-x3D-0，两个线程分别执行-i-100次，值是多少？\" class=\"headerlink\" title=\"给定 i &#x3D; 0，两个线程分别执行 i++ 100次，值是多少？\"></a><strong>给定 i &#x3D; 0，两个线程分别执行 i++ 100次，值是多少？</strong></h4><p>2~200</p>\n<h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p>\n<p>内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p>\n<h3 id=\"Redis列表-List\"><a href=\"#Redis列表-List\" class=\"headerlink\" title=\"Redis列表(List)\"></a>Redis列表(List)</h3><h4 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>单键多值</p>\n<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p>\n<h4 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p>lpush&#x2F;rpush <key><value1><value2><value3> …. 从左边&#x2F;右边插入一个或多个值。</p>\n<p>lpop&#x2F;rpop <key>从左边&#x2F;右边吐出一个值。值在键在，值光键亡。</p>\n<p>rpop|push <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边。</p>\n<p>lrange <key><start><stop></p>\n<p>按照索引下标获得元素(从左到右)</p>\n<p>lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）</p>\n<p>lindex <key><index>按照索引下标获得元素(从左到右)</p>\n<p>llen <key>获得列表长度 </p>\n<p>linsert <key> before <value><newvalue>在<value>的后面插入<newvalue>插入值</p>\n<p>lrem <key><n><value>从左边删除n个value(从左到右)</p>\n<p>lset<key><index><value>将列表key下标为index的值替换成value</p>\n<h4 id=\"数据结构-1\"><a href=\"#数据结构-1\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><p>List的数据结构为快速链表quickList。</p>\n<p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p>\n<p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p>\n<p>当数据量比较多的时候才会改成quicklist。</p>\n<p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p>\n<p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>\n","feature":true,"text":"NOSQL优点1.解决CPU及内存压力 2.解决IO压力 概述NoSQL(NoSQL &#x3D; Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。 NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#NOSQL\"><span class=\"toc-text\">NOSQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">常用五大数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E9%94%AE\"><span class=\"toc-text\">Redis键</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E5%AD%97%E7%AC%A6%E4%B8%B2-String\"><span class=\"toc-text\">Redis字符串(String)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Java-%E4%B8%AD%E7%9A%84-i-%E6%98%AF%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">Java 中的 i++ 是原子操作吗？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%99%E5%AE%9A-i-x3D-0%EF%BC%8C%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%88%86%E5%88%AB%E6%89%A7%E8%A1%8C-i-100%E6%AC%A1%EF%BC%8C%E5%80%BC%E6%98%AF%E5%A4%9A%E5%B0%91%EF%BC%9F\"><span class=\"toc-text\">给定 i &#x3D; 0，两个线程分别执行 i++ 100次，值是多少？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E5%88%97%E8%A1%A8-List\"><span class=\"toc-text\">Redis列表(List)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B-1\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-1\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1\"><span class=\"toc-text\">数据结构</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Java集合框架","uid":"de47803b5d69541ea546c3889eeeba14","slug":"Java集合框架","date":"2022-11-20T08:41:47.000Z","updated":"2022-11-24T04:04:31.750Z","comments":true,"path":"api/articles/Java集合框架.json","keywords":null,"cover":[],"text":"集合概述 概念：对象的容器，定义了对多个对象进项操作的的常用方法。可实现数组的功能。 和数组的区别： 数组长度固定，集合长度不固定。 数组可以存储基本类型和引用类型，集合只能存储引用类型。 位置： java.util.*; Collection Collection父接口 特点：...","link":"","photos":[],"count_time":{"symbolsCount":520,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}
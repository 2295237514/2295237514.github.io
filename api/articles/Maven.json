{"title":"Maven","uid":"6f4f974e39a23a6637b9ccfa82544a76","slug":"Maven","date":"2022-05-18T08:50:49.000Z","updated":"2022-09-27T08:56:13.164Z","comments":true,"path":"api/articles/Maven.json","keywords":null,"cover":[],"content":"<ul>\n<li>Maven是专门用于管理和构建java项目的工具<h1 id=\"Maven基础\"><a href=\"#Maven基础\" class=\"headerlink\" title=\"Maven基础\"></a>Maven基础</h1><h2 id=\"Maven的功能\"><a href=\"#Maven的功能\" class=\"headerlink\" title=\"Maven的功能\"></a>Maven的功能</h2></li>\n</ul>\n<p>1、提供了一套标准化的项目结构</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220518171851.png\"></p>\n<p>2、提供了一套标准化的构建流程（编译，测试，打包，发布……）</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220523160341.png\"></p>\n<p>3、提供了一套依赖管理机制</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220527130234.png\"></p>\n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h2><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220527132204.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220527134137.png\"></p>\n<h2 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h2><ul>\n<li>compile 编译</li>\n<li>clean 清理</li>\n<li>test 测试</li>\n<li>package 打包</li>\n<li>install 安装</li>\n</ul>\n<h2 id=\"IDEA配置Maven\"><a href=\"#IDEA配置Maven\" class=\"headerlink\" title=\"IDEA配置Maven\"></a>IDEA配置Maven</h2><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220604070638.png\"></p>\n<h2 id=\"Maven坐标详解\"><a href=\"#Maven坐标详解\" class=\"headerlink\" title=\"Maven坐标详解\"></a>Maven坐标详解</h2><ul>\n<li><p>什么是坐标：</p>\n<ul>\n<li><p>Maven中的坐标是资源的唯一标识</p>\n</li>\n<li><p>使用坐标来定义项目或引入项目中需要的依赖</p>\n</li>\n</ul>\n</li>\n<li><p>Maven坐标的主要组成</p>\n<ul>\n<li>groupld：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li>\n<li>artifactld：定义当前Maven项目名称（通常是模块名称）</li>\n<li>version：定义当前项目版本号</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220604074342.png\"></p>\n<h2 id=\"IDEA创建Maven项目\"><a href=\"#IDEA创建Maven项目\" class=\"headerlink\" title=\"IDEA创建Maven项目\"></a>IDEA创建Maven项目</h2><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220604074516.png\"></p>\n<h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h2><h3 id=\"使用坐标导入jar包\"><a href=\"#使用坐标导入jar包\" class=\"headerlink\" title=\"使用坐标导入jar包\"></a>使用坐标导入jar包</h3><p>1.在pom.xml中编写&lt;dependencies&gt;标签</p>\n<p>2.在&lt;dependencies&gt;标签中 使用&lt;dependency&gt;引入坐标</p>\n<p>3.定义坐标的groupid，artifactld，version</p>\n<p>4.点击刷新按钮，使坐标生效(建议配置自动生效，无需刷新)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;4.11&lt;&#x2F;version&gt;\n      &lt;scope&gt;test&lt;&#x2F;scope&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;5.1.48&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n  &lt;&#x2F;dependencies&gt;</code></pre>\n\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220604093854.png\"></p>\n<h3 id=\"依赖范围\"><a href=\"#依赖范围\" class=\"headerlink\" title=\"依赖范围\"></a>依赖范围</h3><p> <img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220604100410.png\"></p>\n<h1 id=\"Maven进阶\"><a href=\"#Maven进阶\" class=\"headerlink\" title=\"Maven进阶\"></a>Maven进阶</h1><h2 id=\"分模块开发与设计\"><a href=\"#分模块开发与设计\" class=\"headerlink\" title=\"分模块开发与设计\"></a>分模块开发与设计</h2><ul>\n<li>将原始模块按照功能拆分成若干个子模块，方便模块间的相互调用，接口共享</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220922135648.png\"></p>\n<p>步骤：</p>\n<p>1.创建Maven模块</p>\n<p>2.书写模块代码</p>\n<p>3.通过maven指令安装模块到本地仓库（install指令）</p>\n<h2 id=\"依赖管理-1\"><a href=\"#依赖管理-1\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h2><ul>\n<li><p>依赖具有传递性</p>\n<ul>\n<li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li>\n<li>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</li>\n</ul>\n</li>\n<li><p>依赖传递冲突问题</p>\n<ul>\n<li>路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li>\n<li>声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li>\n<li>特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li>\n</ul>\n</li>\n<li><p>可选依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n      &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;maven_03_pojo&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n      &lt;!--可选依赖是隐藏当前工程所依赖的资源，隐藏后对应资源将不具有依赖传递--&gt;\n      &lt;optional&gt;true&lt;&#x2F;optional&gt;\n  &lt;&#x2F;dependency&gt;</code></pre>\n</li>\n<li><p>排除依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven_04_dao&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;!--排除依赖是隐藏当前资源对应的依赖关系--&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;maven_03_pojo&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;exclusion&gt;\n    &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;</code></pre></li>\n</ul>\n<p><em>简单来梳理下，就是</em></p>\n<ul>\n<li><code>A依赖B,B依赖C</code>,<code>C</code>通过依赖传递会被<code>A</code>使用到，现在要想办法让<code>A</code>不去依赖<code>C</code></li>\n<li>可选依赖是在B上设置<code>&lt;optional&gt;</code>,<code>A</code>不知道有<code>C</code>的存在，</li>\n<li>排除依赖是在A上设置<code>&lt;exclusions&gt;</code>,<code>A</code>知道有<code>C</code>的存在，主动将其排除掉。</li>\n</ul>\n<h2 id=\"聚合-与-继承\"><a href=\"#聚合-与-继承\" class=\"headerlink\" title=\"聚合 与 继承\"></a>聚合 与 继承</h2><h3 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h3><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220922152415.png\"></p>\n<p>聚合项目的打包方式为<strong>POM</strong>，并添加所要管理的项目</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven_01_parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0-RELEASE&lt;&#x2F;version&gt;\n    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;\n    \n    \n    &lt;!--设置管理的模块名称--&gt;\n    &lt;modules&gt;\n        &lt;module&gt;..&#x2F;maven_02_ssm&lt;&#x2F;module&gt;\n        &lt;module&gt;..&#x2F;maven_03_pojo&lt;&#x2F;module&gt;\n        &lt;module&gt;..&#x2F;maven_04_dao&lt;&#x2F;module&gt;\n    &lt;&#x2F;modules&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<ul>\n<li>jar:默认情况，说明该项目为java项目</li>\n<li>war:说明该项目为web项目</li>\n<li>pom:说明该项目为聚合或继承(后面会讲)项目</li>\n</ul>\n<p>使用聚合统一管理项目</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220922153405.png\"></p>\n<p>测试发现，当<code>maven_01_parent</code>的<code>compile</code>被点击后，所有被其管理的项目都会被执行编译操作。这就是聚合工程的作用。</p>\n<p><strong>说明：</strong>聚合工程管理的项目在进行运行的时候，会按照项目与项目之间的依赖关系来自动决定执行的顺序和配置的顺序无关。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><ul>\n<li>所谓继承:描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</li>\n<li>作用：<ul>\n<li>简化配置</li>\n<li>减少版本冲突</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ol>\n<li><p>创建maven模块，设置打包方式为pom</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</code></pre>\n</li>\n<li><p>在父工程的pom文件中配置依赖关系(子工程将沿用父工程中的依赖关系)</p>\n</li>\n<li><p>配置子工程中可选的依赖关系</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;1.1.16&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n    ...\n&lt;&#x2F;dependencyManagement&gt;</code></pre>\n</li>\n<li><p>在子工程中配置当前工程所继承的父工程</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--定义该工程的父工程--&gt;\n&lt;parent&gt;\n    &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven_01_parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0-RELEASE&lt;&#x2F;version&gt;\n    &lt;!--填写父工程的pom文件,可以不写--&gt;\n    &lt;relativePath&gt;..&#x2F;maven_01_parent&#x2F;pom.xml&lt;&#x2F;relativePath&gt;\n&lt;&#x2F;parent&gt;</code></pre>\n</li>\n<li><p>在子工程中配置父工程中可选依赖的坐标</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre></li>\n</ol>\n<p><strong>注意事项:</strong></p>\n<p>1.子工程中使用父工程中的可选依赖时，仅需要提供群组id和项目id，无需提供版本，版本由父工程统一提供，避免版本冲突</p>\n<p>2.子工程中还可以定义父工程中没有定义的依赖关系,只不过不能被父工程进行版本统一管理。</p>\n<hr>\n<h3 id=\"聚合和继承的区别\"><a href=\"#聚合和继承的区别\" class=\"headerlink\" title=\"聚合和继承的区别\"></a>聚合和继承的区别</h3><ul>\n<li>作用：<ul>\n<li>聚合用于快速构建项目</li>\n<li>继承用于快速配置</li>\n</ul>\n</li>\n<li>相同点：<ul>\n<li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中</li>\n<li>聚合和继承均属于设计型模块，并无实际的内容模块</li>\n</ul>\n</li>\n<li>不同点：<ul>\n<li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li>\n<li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>如果我们现在想更新Spring的版本 如何保证多个jar包版本的统一？</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220924094236.png\"></p>\n<p>步骤1:父工程的pom.xml中定义属性</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;properties&gt;\n    &lt;spring.version&gt;5.2.10.RELEASE&lt;&#x2F;spring.version&gt;\n    &lt;junit.version&gt;4.12&lt;&#x2F;junit.version&gt;\n    &lt;mybatis-spring.version&gt;1.3.0&lt;&#x2F;mybatis-spring.version&gt;\n&lt;&#x2F;properties&gt;</code></pre>\n\n<p>步骤2:修改依赖的version</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>此时，我们只需要更新父工程中properties标签中所维护的jar包版本，所有子项目中的版本也就跟着更新。</p>\n<h3 id=\"配置文件加载属性\"><a href=\"#配置文件加载属性\" class=\"headerlink\" title=\"配置文件加载属性\"></a>配置文件加载属性</h3><h4 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><h5 id=\"步骤1-父工程定义属性\"><a href=\"#步骤1-父工程定义属性\" class=\"headerlink\" title=\"步骤1:父工程定义属性\"></a>步骤1:父工程定义属性</h5><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;properties&gt;\n   &lt;jdbc.url&gt;jdbc:mysql:&#x2F;&#x2F;127.1.1.1:3306&#x2F;ssm_db&lt;&#x2F;jdbc.url&gt;\n&lt;&#x2F;properties&gt;</code></pre>\n\n<h5 id=\"步骤2-jdbc-properties文件中引用属性\"><a href=\"#步骤2-jdbc-properties文件中引用属性\" class=\"headerlink\" title=\"步骤2:jdbc.properties文件中引用属性\"></a>步骤2:jdbc.properties文件中引用属性</h5><p>在jdbc.properties，将jdbc.url的值直接获取Maven配置的属性</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">jdbc.driver&#x3D;com.mysql.jdbc.Driver\njdbc.url&#x3D;$&#123;jdbc.url&#125;\njdbc.username&#x3D;root\njdbc.password&#x3D;root</code></pre>\n\n<h5 id=\"步骤3-设置maven过滤文件范围\"><a href=\"#步骤3-设置maven过滤文件范围\" class=\"headerlink\" title=\"步骤3:设置maven过滤文件范围\"></a>步骤3:设置maven过滤文件范围</h5><p>Maven在默认情况下是从当前项目的<code>src\\main\\resources</code>下读取文件进行打包。现在我们需要打包的资源文件是在maven_02_ssm下,需要我们通过配置来指定下具体的资源目录。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;build&gt;\n    &lt;resources&gt;\n        &lt;!--设置资源目录--&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;..&#x2F;maven_02_ssm&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;!--设置能够解析$&#123;&#125;，默认是false --&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n    &lt;&#x2F;resources&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p>**说明:**directory路径前要添加<code>../</code>的原因是maven_02_ssm相对于父工程的pom.xml路径是在其上一层的目录中，所以需要添加。</p>\n<p>修改完后，注意maven_02_ssm项目的resources目录就多了些东西，如下:</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220925101433.png\"></p>\n<h5 id=\"步骤4-测试是否生效\"><a href=\"#步骤4-测试是否生效\" class=\"headerlink\" title=\"步骤4:测试是否生效\"></a>步骤4:测试是否生效</h5><p>测试的时候，只需要将maven_02_ssm项目进行打包，然后观察打包结果中最终生成的内容是否为Maven中配置的内容。</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220925101517.png\"></p>\n<p>上面的属性管理就已经完成，但是有一个问题没有解决，因为不只是maven_02_ssm项目需要有属性被父工程管理，如果有多个项目需要配置，该如何实现呢?</p>\n<p>方式一:</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;build&gt;\n    &lt;resources&gt;\n        &lt;!--设置资源目录，并设置能够解析$&#123;&#125;--&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;..&#x2F;maven_02_ssm&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;..&#x2F;maven_03_pojo&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n        ...\n    &lt;&#x2F;resources&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p>可以配，但是如果项目够多的话，这个配置也是比较繁琐</p>\n<p>方式二:</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;build&gt;\n    &lt;resources&gt;\n        &lt;!--\n\t\t\t$&#123;project.basedir&#125;: 当前项目所在目录,子项目继承了父项目，\n\t\t\t相当于所有的子项目都添加了资源目录的过滤\n\t\t--&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;$&#123;project.basedir&#125;&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n    &lt;&#x2F;resources&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p>**说明:**打包的过程中如果报如下错误:</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220925101605.png\"></p>\n<p>原因就是Maven发现你的项目为web项目，就会去找web项目的入口web.xml[配置文件配置的方式]，发现没有找到，就会报错。</p>\n<p>解决方案1：在maven_02_ssm项目的<code>src\\main\\webapp\\WEB-INF\\</code>添加一个web.xml文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_1.xsd&quot;\n         version&#x3D;&quot;3.1&quot;&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<p>上面我们所使用的都是Maven的自定义属性，除了${project.basedir},它属于Maven的内置系统属性。</p>\n<p>在Maven中的属性分为:</p>\n<ul>\n<li>自定义属性（常用）</li>\n<li>内置属性</li>\n<li>Setting属性</li>\n<li>Java系统属性</li>\n<li>环境变量属性</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220925101720.png\"></p>\n<p>具体如何查看这些属性:</p>\n<p>在cmd命令行中输入<code>mvn help:system</code></p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220925101751.png\"></p>\n<p>具体使用，就是使用 <code>$&#123;key&#125;</code>来获取，key为等号左边的，值为等号右边的，比如获取红线的值，对应的写法为 <code>$&#123;java.runtime.name&#125;</code>。</p>\n<h3 id=\"版本管理\"><a href=\"#版本管理\" class=\"headerlink\" title=\"版本管理\"></a>版本管理</h3><p>在我们jar包的版本定义中，有两个工程版本用的比较多:</p>\n<ul>\n<li>SNAPSHOT（快照版本）<ul>\n<li>项目开发过程中临时输出的版本，称为快照版本</li>\n<li>快照版本会随着开发的进展不断更新</li>\n</ul>\n</li>\n<li>RELEASE（发布版本）<ul>\n<li>项目开发到一定阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的</li>\n<li>即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本</li>\n</ul>\n</li>\n</ul>\n<p>除了上面的工程版本，我们还经常能看到一些发布版本:</p>\n<ul>\n<li>alpha版:内测版，bug多不稳定内部版本不断添加新功能</li>\n<li>beta版:公测版，不稳定(比alpha稳定些)，bug相对较多不断添加新功能</li>\n<li>纯数字版</li>\n</ul>\n<h3 id=\"多环境配置与应用\"><a href=\"#多环境配置与应用\" class=\"headerlink\" title=\"多环境配置与应用\"></a>多环境配置与应用</h3><h4 id=\"多环境开发\"><a href=\"#多环境开发\" class=\"headerlink\" title=\"多环境开发\"></a>多环境开发</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220925112837.png\"></p>\n<ul>\n<li>我们平常都是在自己的开发环境进行开发，</li>\n<li>当开发完成后，需要把开发的功能部署到测试环境供测试人员进行测试使用，</li>\n<li>等测试人员测试通过后，我们会将项目部署到生成环境上线使用。</li>\n<li>这个时候就有一个问题是，不同环境的配置是不相同的，如不可能让三个环境都用一个数据库，所以就会有三个数据库的url配置，</li>\n<li>我们在项目中如何配置?</li>\n<li>要想实现不同环境之间的配置切换又该如何来实现呢?</li>\n</ul>\n<p>maven提供配置多种环境的设定，帮助开发者在使用过程中快速切换环境。具体实现步骤:</p>\n<h4 id=\"步骤1-父工程配置多个环境-并指定默认激活环境\"><a href=\"#步骤1-父工程配置多个环境-并指定默认激活环境\" class=\"headerlink\" title=\"步骤1:父工程配置多个环境,并指定默认激活环境\"></a>步骤1:父工程配置多个环境,并指定默认激活环境</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;profiles&gt;\n    &lt;!--开发环境--&gt;\n    &lt;profile&gt;\n        &lt;id&gt;env_dep&lt;&#x2F;id&gt;\n        &lt;properties&gt;\n            &lt;jdbc.url&gt;jdbc:mysql:&#x2F;&#x2F;127.1.1.1:3306&#x2F;ssm_db&lt;&#x2F;jdbc.url&gt;\n        &lt;&#x2F;properties&gt;\n        &lt;!--设定是否为默认启动环境--&gt;\n        &lt;activation&gt;\n            &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;\n        &lt;&#x2F;activation&gt;\n    &lt;&#x2F;profile&gt;\n    &lt;!--生产环境--&gt;\n    &lt;profile&gt;\n        &lt;id&gt;env_pro&lt;&#x2F;id&gt;\n        &lt;properties&gt;\n            &lt;jdbc.url&gt;jdbc:mysql:&#x2F;&#x2F;127.2.2.2:3306&#x2F;ssm_db&lt;&#x2F;jdbc.url&gt;\n        &lt;&#x2F;properties&gt;\n    &lt;&#x2F;profile&gt;\n    &lt;!--测试环境--&gt;\n    &lt;profile&gt;\n        &lt;id&gt;env_test&lt;&#x2F;id&gt;\n        &lt;properties&gt;\n            &lt;jdbc.url&gt;jdbc:mysql:&#x2F;&#x2F;127.3.3.3:3306&#x2F;ssm_db&lt;&#x2F;jdbc.url&gt;\n        &lt;&#x2F;properties&gt;\n    &lt;&#x2F;profile&gt;\n&lt;&#x2F;profiles&gt;</code></pre>\n\n<p><strong>所以总结来说，对于多环境切换只需要两步即可:</strong></p>\n<ul>\n<li><p>父工程中定义多环境</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;profiles&gt;\n\t&lt;profile&gt;\n    \t&lt;id&gt;环境名称&lt;&#x2F;id&gt;\n        &lt;properties&gt;\n        \t&lt;key&gt;value&lt;&#x2F;key&gt;\n        &lt;&#x2F;properties&gt;\n        &lt;activation&gt;\n        \t&lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;\n        &lt;&#x2F;activation&gt;\n    &lt;&#x2F;profile&gt;\n    ...\n&lt;&#x2F;profiles&gt;</code></pre>\n</li>\n<li><p>使用多环境(构建过程)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mvn 指令 -P 环境定义ID[环境定义中获取]</code></pre></li>\n</ul>\n<h4 id=\"跳过测试\"><a href=\"#跳过测试\" class=\"headerlink\" title=\"跳过测试\"></a>跳过测试</h4><ul>\n<li>应用场景<ul>\n<li>功能更新中并且没有开发完毕</li>\n<li>快速打包</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<p>前面在执行<code>install</code>指令的时候，Maven都会按照顺序从上往下依次执行，每次都会执行<code>test</code>,</p>\n<p>对于<code>test</code>来说有它存在的意义，</p>\n<ul>\n<li>可以确保每次打包或者安装的时候，程序的正确性，假如测试已经通过在我们没有修改程序的前提下再次执行打包或安装命令，由于顺序执行，测试会被再次执行，就有点耗费时间了。</li>\n<li>功能开发过程中有部分模块还没有开发完毕，测试无法通过，但是想要把其中某一部分进行快速打包，此时由于测试环境失败就会导致打包失败。</li>\n</ul>\n<p>遇到上面这些情况的时候，我们就想跳过测试执行下面的构建命令，具体实现方式有很多：</p>\n<h5 id=\"方式一-IDEA工具实现跳过测试\"><a href=\"#方式一-IDEA工具实现跳过测试\" class=\"headerlink\" title=\"方式一:IDEA工具实现跳过测试\"></a>方式一:IDEA工具实现跳过测试</h5><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220925150619.png\"></p>\n<p>图中的按钮为<code>Toggle &#39;Skip Tests&#39; Mode</code>,</p>\n<p>Toggle翻译为切换的意思，也就是说在测试与不测试之间进行切换。</p>\n<p>点击一下，出现测试画横线的图片，如下:</p>\n<p><img src=\"/../../../BaiduNetdiskDownload/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B68%E7%AC%94%E8%AE%B0/Maven%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/assets/1630985411766.png\" alt=\"1630985411766\"></p>\n<p>说明测试已经被关闭，再次点击就会恢复。</p>\n<p>这种方式最简单，但是有点”暴力”，会把所有的测试都跳过，如果我们想更精细的控制哪些跳过哪些不跳过，就需要使用配置插件的方式。</p>\n<h5 id=\"方式二-配置插件实现跳过测试\"><a href=\"#方式二-配置插件实现跳过测试\" class=\"headerlink\" title=\"方式二:配置插件实现跳过测试\"></a>方式二:配置插件实现跳过测试</h5><p>在父工程中的pom.xml中添加测试插件配置</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;artifactId&gt;maven-surefire-plugin&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.12.4&lt;&#x2F;version&gt;\n            &lt;configuration&gt;\n                &lt;skipTests&gt;false&lt;&#x2F;skipTests&gt;\n                &lt;!--排除掉不参与测试的内容--&gt;\n                &lt;excludes&gt;\n                    &lt;exclude&gt;**&#x2F;BookServiceTest.java&lt;&#x2F;exclude&gt;\n                &lt;&#x2F;excludes&gt;\n            &lt;&#x2F;configuration&gt;\n        &lt;&#x2F;plugin&gt;\n    &lt;&#x2F;plugins&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p>skipTests:如果为true，则跳过所有测试，如果为false，则不跳过测试</p>\n<p>excludes：哪些测试类不参与测试，即排除，针对skipTests为false来设置的</p>\n<p>includes: 哪些测试类要参与测试，即包含,针对skipTests为true来设置的</p>\n<h5 id=\"方式三-命令行跳过测试\"><a href=\"#方式三-命令行跳过测试\" class=\"headerlink\" title=\"方式三:命令行跳过测试\"></a>方式三:命令行跳过测试</h5><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220925150717.png\"></p>\n<p>使用Maven的命令行，<code>mvn 指令 -D skipTests</code></p>\n<p>注意事项:</p>\n<ul>\n<li>执行的项目构建指令必须包含测试生命周期，否则无效果。例如执行compile生命周期，不经过test生命周期。</li>\n<li>该命令可以不借助IDEA，直接使用cmd命令行进行跳过测试，需要注意的是cmd要在pom.xml所在目录下进行执行。</li>\n</ul>\n<h3 id=\"私服\"><a href=\"#私服\" class=\"headerlink\" title=\"私服\"></a>私服</h3><h4 id=\"私服简介及使用\"><a href=\"#私服简介及使用\" class=\"headerlink\" title=\"私服简介及使用\"></a>私服简介及使用</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220926111028.png\"></p>\n<ul>\n<li>私服是一台独立的服务器，用于解决团队内部的资源共享与资源同步问题</li>\n</ul>\n<p>搭建Maven私服的方式有很多，我们来介绍其中一种使用量比较大的实现方式:</p>\n<ul>\n<li>Nexus<ul>\n<li>Sonatype公司的一款maven私服产品</li>\n<li>下载地址：<a href=\"https://help.sonatype.com/repomanager3/download\">https://help.sonatype.com/repomanager3/download</a></li>\n</ul>\n</li>\n</ul>\n<p>使用cmd进入到解压目录下的<code>nexus-3.30.1-01\\bin</code>,执行如下命令:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">nexus.exe &#x2F;run nexus</code></pre>\n\n<p>至此私服就已经安装成功。如果要想修改一些基础配置信息，可以使用:</p>\n<ul>\n<li>修改基础配置信息<ul>\n<li>安装路径下etc目录中nexus-default.properties文件保存有nexus基础配置信息，例如默认访问端口。</li>\n</ul>\n</li>\n<li>修改服务器运行配置信息<ul>\n<li>安装路径下bin目录中nexus.vmoptions文件保存有nexus服务器启动对应的配置信息，例如默认占用内存空间。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"私服仓库分类\"><a href=\"#私服仓库分类\" class=\"headerlink\" title=\"私服仓库分类\"></a>私服仓库分类</h4><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220927085153.png\"></p>\n<h4 id=\"本地仓库访问私服配置\"><a href=\"#本地仓库访问私服配置\" class=\"headerlink\" title=\"本地仓库访问私服配置\"></a>本地仓库访问私服配置</h4><p>步骤1:私服上配置仓库</p>\n<h4 id=\"步骤2-配置本地Maven对私服的访问权限\"><a href=\"#步骤2-配置本地Maven对私服的访问权限\" class=\"headerlink\" title=\"步骤2:配置本地Maven对私服的访问权限\"></a>步骤2:配置本地Maven对私服的访问权限</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;servers&gt;\n    &lt;server&gt;\n        &lt;id&gt;itheima-snapshot&lt;&#x2F;id&gt;\n        &lt;username&gt;admin&lt;&#x2F;username&gt;\n        &lt;password&gt;admin&lt;&#x2F;password&gt;\n    &lt;&#x2F;server&gt;\n    &lt;server&gt;\n        &lt;id&gt;itheima-release&lt;&#x2F;id&gt;\n        &lt;username&gt;admin&lt;&#x2F;username&gt;\n        &lt;password&gt;admin&lt;&#x2F;password&gt;\n    &lt;&#x2F;server&gt;\n&lt;&#x2F;servers&gt;</code></pre>\n\n<h4 id=\"步骤3-配置私服的访问路径\"><a href=\"#步骤3-配置私服的访问路径\" class=\"headerlink\" title=\"步骤3:配置私服的访问路径\"></a>步骤3:配置私服的访问路径</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;mirrors&gt;\n    &lt;mirror&gt;\n        &lt;!--配置仓库组的ID--&gt;\n        &lt;id&gt;maven-public&lt;&#x2F;id&gt;\n        &lt;!--*代表所有内容都从私服获取--&gt;\n        &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;\n        &lt;!--私服仓库组maven-public的访问路径--&gt;\n        &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;\n    &lt;&#x2F;mirror&gt;\n&lt;&#x2F;mirrors&gt;</code></pre>\n\n<p><strong>为了避免阿里云Maven私服地址的影响，建议先将之前配置的阿里云Maven私服镜像地址注释掉，等练习完后，再将其恢复。</strong></p>\n<h4 id=\"资源上传与下载\"><a href=\"#资源上传与下载\" class=\"headerlink\" title=\"资源上传与下载\"></a>资源上传与下载</h4><p>本地仓库与私服已经建立了连接，接下来我们就需要往私服上上传资源和下载资源，具体的实现步骤为:</p>\n<h5 id=\"步骤1-配置工程上传私服的具体位置\"><a href=\"#步骤1-配置工程上传私服的具体位置\" class=\"headerlink\" title=\"步骤1:配置工程上传私服的具体位置\"></a>步骤1:配置工程上传私服的具体位置</h5><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"> &lt;!--配置当前工程保存在私服中的具体位置--&gt;\n&lt;distributionManagement&gt;\n    &lt;repository&gt;\n        &lt;!--和maven&#x2F;settings.xml中server中的id一致，表示使用该id对应的用户名和密码--&gt;\n        &lt;id&gt;itheima-release&lt;&#x2F;id&gt;\n         &lt;!--release版本上传仓库的具体地址--&gt;\n        &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;repository&#x2F;itheima-release&#x2F;&lt;&#x2F;url&gt;\n    &lt;&#x2F;repository&gt;\n    &lt;snapshotRepository&gt;\n        &lt;!--和maven&#x2F;settings.xml中server中的id一致，表示使用该id对应的用户名和密码--&gt;\n        &lt;id&gt;itheima-snapshot&lt;&#x2F;id&gt;\n        &lt;!--snapshot版本上传仓库的具体地址--&gt;\n        &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;repository&#x2F;itheima-snapshot&#x2F;&lt;&#x2F;url&gt;\n    &lt;&#x2F;snapshotRepository&gt;\n&lt;&#x2F;distributionManagement&gt;</code></pre>\n\n<h5 id=\"步骤2-发布资源到私服\"><a href=\"#步骤2-发布资源到私服\" class=\"headerlink\" title=\"步骤2:发布资源到私服\"></a>步骤2:发布资源到私服</h5><p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220927164136.png\"></p>\n<p>或者执行Maven命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mvn deploy</code></pre>\n\n<p><strong>注意:</strong></p>\n<p>要发布的项目都需要配置<code>distributionManagement</code>标签，要么在自己的pom.xml中配置，要么在其父项目中配置，然后子项目中继承父项目即可。</p>\n<p><img src=\"https://raw.githubusercontent.com/2295237514/image/main/20220927165603.png\"></p>\n","text":" Maven是专门用于管理和构建java项目的工具Maven基础Maven的功能 1、提供了一套标准化的项目结构 2、提供了一套标准化的构建流程（编译，测试，打包，发布……） 3、提供了一套依赖管理机制 模型 常见命令 compile 编译 clean 清理 test 测试 pa...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Maven%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Maven基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Maven%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">Maven的功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">常见命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IDEA%E9%85%8D%E7%BD%AEMaven\"><span class=\"toc-text\">IDEA配置Maven</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Maven%E5%9D%90%E6%A0%87%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">Maven坐标详解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IDEA%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">IDEA创建Maven项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">依赖管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9D%90%E6%A0%87%E5%AF%BC%E5%85%A5jar%E5%8C%85\"><span class=\"toc-text\">使用坐标导入jar包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">依赖范围</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Maven%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">Maven进阶</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E4%B8%8E%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">分模块开发与设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86-1\"><span class=\"toc-text\">依赖管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88-%E4%B8%8E-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">聚合 与 继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88\"><span class=\"toc-text\">聚合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">步骤</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88%E5%92%8C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">聚合和继承的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">配置文件加载属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4-1\"><span class=\"toc-text\">步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A41-%E7%88%B6%E5%B7%A5%E7%A8%8B%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">步骤1:父工程定义属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A42-jdbc-properties%E6%96%87%E4%BB%B6%E4%B8%AD%E5%BC%95%E7%94%A8%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">步骤2:jdbc.properties文件中引用属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A43-%E8%AE%BE%E7%BD%AEmaven%E8%BF%87%E6%BB%A4%E6%96%87%E4%BB%B6%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">步骤3:设置maven过滤文件范围</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A44-%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E7%94%9F%E6%95%88\"><span class=\"toc-text\">步骤4:测试是否生效</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">版本管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">多环境配置与应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">多环境开发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A41-%E7%88%B6%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E7%8E%AF%E5%A2%83-%E5%B9%B6%E6%8C%87%E5%AE%9A%E9%BB%98%E8%AE%A4%E6%BF%80%E6%B4%BB%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">步骤1:父工程配置多个环境,并指定默认激活环境</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">跳过测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%B8%80-IDEA%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">方式一:IDEA工具实现跳过测试</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%BA%8C-%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">方式二:配置插件实现跳过测试</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%B8%89-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">方式三:命令行跳过测试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A7%81%E6%9C%8D\"><span class=\"toc-text\">私服</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A7%81%E6%9C%8D%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">私服简介及使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">私服仓库分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E8%AE%BF%E9%97%AE%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">本地仓库访问私服配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A42-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0Maven%E5%AF%B9%E7%A7%81%E6%9C%8D%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90\"><span class=\"toc-text\">步骤2:配置本地Maven对私服的访问权限</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A43-%E9%85%8D%E7%BD%AE%E7%A7%81%E6%9C%8D%E7%9A%84%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">步骤3:配置私服的访问路径</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">资源上传与下载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A41-%E9%85%8D%E7%BD%AE%E5%B7%A5%E7%A8%8B%E4%B8%8A%E4%BC%A0%E7%A7%81%E6%9C%8D%E7%9A%84%E5%85%B7%E4%BD%93%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">步骤1:配置工程上传私服的具体位置</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A42-%E5%8F%91%E5%B8%83%E8%B5%84%E6%BA%90%E5%88%B0%E7%A7%81%E6%9C%8D\"><span class=\"toc-text\">步骤2:发布资源到私服</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Mybatis","uid":"54e1d69dbe01003cc0c2e45b21bc6b3e","slug":"Mybatis","date":"2022-06-07T08:06:27.000Z","updated":"2022-07-26T07:18:33.311Z","comments":true,"path":"api/articles/Mybatis.json","keywords":null,"cover":[],"text":"入门_MyBatis中文网(Mybatis.pdf)什么是Mybatis？ Mybatis是一款优秀的持久层框架，用于简化JDBC开发 官网：https://mybatis.org/mybatis-3/zh/index.html 持久层： 负责将数据保存到数据库的那一层代码 Ja...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JDBC总结","uid":"f83fade08690f69bc32eef72fe024ed9","slug":"JDBC总结","date":"2022-05-07T02:47:07.000Z","updated":"2022-05-23T15:00:59.686Z","comments":true,"path":"api/articles/JDBC总结.json","keywords":null,"cover":[],"text":"JDBC快速入门 (JDBC.pdf)1、编写代码步骤1、创建工程,导入驱动jar包 jar包 2、注册驱动Class.forName(&quot;com.mysql.jdbc.Driver&quot;); 3、获取连接Connection conn &#x3D; DriverM...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
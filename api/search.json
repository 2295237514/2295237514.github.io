[{"id":"f83fade08690f69bc32eef72fe024ed9","title":"JDBC总结","content":"JDBC快速入门\t(JDBC.pdf)1、编写代码步骤1、创建工程,导入驱动jar包\n jar包\n2、注册驱动Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n\n3、获取连接Connection conn &#x3D; DriverMannager.getConnection(url,username,password);\n\n4、定义SQL语句String sql &#x3D; &quot;&quot;;\n\n5、获取执行SQL的对象Statement stmt &#x3D; conn.createStatement();\n\n6、执行SQL语句stmt.executeUpdate(sql);  \n&#x2F;&#x2F;此方法会执行sql语句并返回受影响的行数。可以用\nint count &#x3D; stmt.executeUpdate(sql)接受返回值;\n\n7、处理返回结果8、释放资源stmt.close();\nconn.cloes();\n\n例\nAPI详解1、DriverManager1、注册驱动*** MYSQL 5之后的驱动包，可以省略注册驱动的步骤***\n\n这个方法可以完成驱动的注册，但是实际开发中一般不会使用这个方法完成驱动的注册\n原因：\n如果需要注册驱动，就会使用，DriverManager.registerDriver(new Driver()); ,但是查看源代码发现，在代码中一段静态代码块，静态代码块已经调用了注册驱动的方法。\n\n如果再手动调用该方法注册驱动，就会导致驱动被注册两次。实际开发中一般户次爱用;\nClass.forName(&quot;com.mysql.jdbc.Driver&quot;);\n\n2、获得与数据库的连接\n这个方法就是用来获得与数据库连接的方法，这个方法中的三个参数为 与数据库连接的路径(url)，与数据库连接的用户名(user)，与数据库连接的密码(password)。\n主要是url的写法：\njdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1\n\njdbc:mysql:&#x2F;&#x2F;ip地址:端口号&#x2F;数据库名称?参数键值对1&amp;参数键值对2...\n\nlocalhost           :连接的MySQL数据库服务器的主机ip地址。（连接是本机就可以写成localhost），如果连接不是本机的，就需要写上连接主机的IP地址。\nurl如果连接的是本机的路径，可以简化为如下格式：\njdbc:mysql:&#x2F;&#x2F;&#x2F;db1\n配置useSSL &#x3D; false 参数，禁用安全连接方式，解决警告提示\n2、Connection1、获取执行SQL对象普通执行SQL对象\nStatement createStatement();\n\n 预编译SQL的执行SQL对象；防止SQL注入\nPreparedStatement prepareStatement(sql);\n\n执行存储过程的对象\nCallableStatement prepareCall(sql)\n\n2、事务管理MYSQL事务管理开启事务：  begin;&#x2F;start transaction;\n提交事务：  commit;\n回滚事务：  rollback;\n\nMYSQL默认自动提交事务\n\nJDBC事务管理Connection接口中定义了3个对应的方法\n开启事务：setAutoCommit(bollean autoCommit): true为自动提交事务；false为手动提交事务，即为开启事务\n提交事务：commit()\n回滚事务：rollback()\n\n例：\npackage com.itheima.jdbc;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n&#x2F;**\n * JDBC API 详解：Connection\n *&#x2F;\npublic class JDBCDemo3_Connection &#123;\n\n    public static void main(String[] args) throws Exception &#123;\n        &#x2F;&#x2F;1. 注册驱动\n        &#x2F;&#x2F;Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n        &#x2F;&#x2F;2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写\n        String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;&#x2F;db1?useSSL&#x3D;false&quot;;\n        String username &#x3D; &quot;root&quot;;\n        String password &#x3D; &quot;1234&quot;;\n        Connection conn &#x3D; DriverManager.getConnection(url, username, password);\n        &#x2F;&#x2F;3. 定义sql\n        String sql1 &#x3D; &quot;update account set money &#x3D; 3000 where id &#x3D; 1&quot;;\n        String sql2 &#x3D; &quot;update account set money &#x3D; 3000 where id &#x3D; 2&quot;;\n        &#x2F;&#x2F;4. 获取执行sql的对象 Statement\n        Statement stmt &#x3D; conn.createStatement();\n\n        try &#123;\n            &#x2F;&#x2F; 开启事务\n            conn.setAutoCommit(false);\n            &#x2F;&#x2F;5. 执行sql\n            int count1 &#x3D; stmt.executeUpdate(sql1);&#x2F;&#x2F;受影响的行数\n            &#x2F;&#x2F;6. 处理结果\n            System.out.println(count1);\n            int i &#x3D; 3&#x2F;0;\n            &#x2F;&#x2F;5. 执行sql\n            int count2 &#x3D; stmt.executeUpdate(sql2);&#x2F;&#x2F;受影响的行数\n            &#x2F;&#x2F;6. 处理结果\n            System.out.println(count2);\n\n            &#x2F;&#x2F; 提交事务\n            conn.commit();\n        &#125; catch (Exception throwables) &#123;\n            &#x2F;&#x2F; 回滚事务\n            conn.rollback();\n            throwables.printStackTrace();\n        &#125;\n\n\n\n        &#x2F;&#x2F;7. 释放资源\n        stmt.close();\n        conn.close();\n    &#125;\n&#125;\n\n3、Statement1、执行SQL语句int executeUpdate(sql):执行DML、DDL语句\n返回值（1）DML语句影响的行数（2）DDL语句执行后，执行成功也可能返回0\n\nResultSet executeQuery(sql):执行DQL语句\n返回值：Result结果集对象\n\n4、ResultSet封装了DQL查询语句的结果ResultSet stmt.executeQuery(sql); 执行DQL语句，返回ResultSet对象\n\n获取查询结果boolean next(): (1)将光标从当前位置向前移动一行 (2)判断当前行是否为有效行\n返回值 true：有效行，当前行有数据   false：无效行，当前行没有数据\n\nxxx getXxx(参数):获取数据\nxxx：数据类型，如 ： int getInt(参数) String getString(参数)\n参数：int： 列的编号，从1开始\n\t string：列的名称\n\n使用步骤1、游标向下移动一行，并判断该行是否有数据：next()\n2 、获取数据：getXxx(参数)\n&#x2F;&#x2F;循环判断游标是否是最后一行末尾\nwhile(rs.next())\n&#123;\n\t&#x2F;&#x2F;获取数据\n\trs.getXxx(参数);\n&#125;\n\n5、PreparedStatement作用：预编译SQL语句并执行，防止SQL注入问题如：用户名随便写，密码写成’ or ‘ 1 ‘ &#x3D; ‘1\n用法：1、获取PreparedStatement对象&#x2F;&#x2F;SQL语句中的参数值，使用？占位符替代\nString sql &#x3D; &quot;select * from user where username &#x3D; ? and password &#x3D; ？&quot;;\n&#x2F;&#x2F;通过Connection对象获取，并传入对应的SQL语句\nPreparedStatement pstmt &#x3D; conn.prepareStatement(sql);\n\n2、设置参数值PreparedStatement对象:setXxx(参数1,参数2):给？赋值\nXxx:数据类型，如setInt(参数1,参数2)\n参数：\n参数1：？的位置编号，从1开始\n参数2：？的值\n\n3、执行SQLexecuteUpdate();&#x2F;executeQuery(); :不需要再传递sql\n\n\n\n例public class JDBCDemo7_PreparedStatement &#123;\n\n    @Test\n    public void testPreparedStatement() throws  Exception &#123;\n       &#x2F;&#x2F;2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写\n       String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;&#x2F;db1?useSSL&#x3D;false&quot;;\n       String username &#x3D; &quot;root&quot;;\n       String password &#x3D; &quot;1234&quot;;\n       Connection conn &#x3D; DriverManager.getConnection(url, username, password);\n\n       &#x2F;&#x2F; 接收用户输入 用户名和密码\n        String name &#x3D; &quot;zhangsan&quot;;\n        String pwd &#x3D; &quot;&#39; or &#39;1&#39; &#x3D; &#39;1&quot;;\n\n        &#x2F;&#x2F; 定义sql\n        String sql &#x3D; &quot;select * from tb_user where username &#x3D; ? and password &#x3D; ?&quot;;\n\n        &#x2F;&#x2F; 获取pstmt对象\n        PreparedStatement pstmt &#x3D; conn.prepareStatement(sql);\n\n        &#x2F;&#x2F; 设置？的值\n        pstmt.setString(1,name);\n        pstmt.setString(2,pwd);\n\n        &#x2F;&#x2F; 执行sql\n        ResultSet rs &#x3D; pstmt.executeQuery();\n\n        &#x2F;&#x2F; 判断登录是否成功\n        if(rs.next())&#123;\n            System.out.println(&quot;登录成功~&quot;);\n        &#125;else&#123;\n            System.out.println(&quot;登录失败~&quot;);\n        &#125;\n\n        &#x2F;&#x2F;7. 释放资源\n        rs.close();\n        pstmt.close();\n        conn.close();\n    &#125;\n\n好处：1、预编译SQL，性能更高\n2、防止SQL注入，将敏感字符进行转义\nPreparedStatement预编译功能开启：useServerPrepStmts&#x3D;true\n（参数键值对）应加在URL最后\n配置MySQL执行日志（重启mysql服务后生效）\nlog-output&#x3D;FILE\ngeneral-log&#x3D;1\ngeneral_log_file&#x3D;&quot;D:\\mysql.log&quot;\nslow-query-log&#x3D;1\nslow_query_log_file&#x3D;&quot;D:\\mysql_slow.log&quot;\nlong_query_time&#x3D;2\n\n原理：1、在获取PreparedStatement对象时，将sql语句发送给mysql服务器进行检查，编译（这些步骤很耗时）\n2、执行时就不用再进行这些步骤了，速度更快\n3、如果sql模板一样，则只需要进行一次检查编译\n\n数据库连接池简介\n数据库连接池是个容器，负责分配，，管理数据库连接\n\n它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个\n\n释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏\n\n好处：\n\n资源重用\n\n提升系统响应速度\n\n避免数据库连接遗漏\n\n\n\n\n数据库连接池实现标准接口\n官方（SUN）提供的数据库连接池标准接口，由第三方组织实现此接口。\n功能：获取连接\n\nConnection getConnection()\n\n常见的数据库连接池：\nDBCP\nC3P0\nDruid\n\nDruid（德鲁伊）\nDruid连接池是阿里巴巴开源的数据库连接池项目\n功能强大，性能优秀，是Java语言最好的数据库连接池之一\n\n","slug":"JDBC总结","date":"2022-05-07T02:47:07.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"758e18fa21f3b95498a42a108b10694c","title":"SQL总结","content":"SQL通用语法1.SQL语句可以单行或多行书写，以分号结尾。\n2.MYSQL数据库的SQL语句不区分大小写，关键字建议适用大写。\n3.注释\n （1） 单行注释：– 注释内容（两个横杠一个空格+注释内容） 或 #注释内容（MYSQL特有)\n（2） 多行注释： &#x2F;* 注释 *&#x2F;\n对 MYSQL 的 windows命令1、启动mysql服务net start mysql 启动 mysql 服务\nnet stop mysql 关闭 mysql 服务\n\n2、进入mysql，输入密码：mysql -hlocalhost -uroot -proot 进入mysql数据库，其中-h表示服务器名，localhost表示本地；\n-u为数据库用户名，root是mysql默认用户名；-p为密码，如果设置了密码，可直接在-p后直接输入。\n\nmysql -u root -p;\n\n对数据库的操作1、查看所有数据库mysql&gt; show databases;\n\n2、创建数据库mysql&gt; create database; 数据库名称\n如果数据库已经存在，则会报错\n可使用\nmysql&gt; create database if not exists; 数据库名称\n\n3、删除数据库drop database 数据库名称;\ndrop database if exists 数据库名称;\n\n4、使用数据库使用数据库 use 数据库名称;\n\n5、查看当前使用的数据库select database();\n\n对表的操作· 创建（create）\n·查询（retrieve）\n·修改（update）\n·删除（delete）\n1、创建（create）创建表create table 表名(\n\t\t字段名1 数据类型1,\n\t\t字段名2 数据类型2,\n\t\t...\n\t\t字段名n 数据类型n\n);\n\n最后一行末尾不能加逗号\n2、查询（retrieve）查询当前数据库下所有表名称show tables;\n\n查询表结构desc 表名称;\n\n3、修改（update）修改表名alter table 表名 rename to 新的表名;\n\n添加一列alter table 表名 add 列名 数据类型;\n\n修改数据类型alter table 表名 modify 列名 新数据类型;\n\n修改列名和数据类型alter table 表名 change 列名 新列名 新数据类型;\n\n删除列alter table 表名 drop 列名;\n\n\n\n4、删除（delete）删除表drop table 表名;\ndrop table if exists 表名;\n\n对数据的操作添加数据1、给指定列添加数据insert into 表名(列名1,列名2，...)values(值1,值2,...); \n\n2、给全部列添加数据insert into 表名 values(值1,值2,...);\n\n3、批量添加数据insert into 表名(列名1,列名2,...) values(值1,值2,...),(值1,值2,...),(值1,值2,...)...;\n\ninsert into 表名 values(值1,值2,...),(值1,值2,...),(值1,值2,...)...;\n\n修改数据1、修改表数据update 表名 set 列名1&#x3D;值1,列名2&#x3D;值2,...[where 条件];\n\n修改语句如果不加条件，则所有数据都将被修改!\n删除数据1、删除数据delete from 表名 [where 条件];\n\n删除语句如果不加条件，则所有数据都将被删除\n查询数据select\n\t字段列表\nfrom\n\t表名列表\nwhere\n\t条件列表\ngroup by\n\t分组字段\nhaving\n\t分组后条件\norder by\n\t排序字段\nlimit\n\t分页限定\n\n\n\n\n\n\n\n\n约束 \n外键约束\n数据库设计\n\n\n多表查询内连接隐式内连接\nselect 字段列表 from 表1,表2... where 条件;\n\n显式内连接\nselect 字段列表 from 表1 [inner] join 表2 on 条件；\n\n内连接相当于查询A B 交集数据\n外连接左外连接\nselect 字段列表 from 表1 left [outer] join 表2 on 条件；\n右外连接\nselect 字段列表 from 表1 right [outer] join 表2 on 条件；\n\n左外连接 ：相当于查询A表所有数据和交集部分数据\n右外连接 ：相当于查询B表所有数据和交集部分数据\n子查询子查询根据查询结果不同，作用不同;1、单行单列:作为条件值，使用&#x3D;,!&#x3D;,&gt;,&lt;等进行条件判断\nselect 字段列表 from 表 where 字段名 &#x3D; (子查询)；\n\n2、多行单列:作为条件值，使用in等关键字进行条件判断\nselect 字段列表 from 表 where 字段名 in (子查询)；\n\n 3、多行duolie:作为虚拟表\nselect 字段列表 from (子查询) where 条件；\n\n事物1、开启事务start transaction; 或者 begin;\n\n2、提交事务commit;\n\n3、回滚事务rollback;\n\n4、事务的特性\n5.事务提交mysql事务默认自动提交\n-- 查看事物的默认提交方式\nselect @@autocommit;\n-- 1 自动提交 0 手动提交\n-- 修改事务提交方式\nset @@autocommit &#x3D; 0;\n","slug":"SQL总结","date":"2022-04-30T08:59:10.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"a64b935a3dc12ce8d8b93a103ca9afe0","title":"java核心技术卷总结","content":"1.&amp;&amp;和|| 运算符是按照“短路”方式来求值的：如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了。2.位移运算符的右操作数要完成模32的运算（除非左操作数是long类型，在这种情况下需要对右操作数模64）。例如，1&lt;&lt;35的值等同于1&lt;&lt;3或8。3.同一个级别的运算符按照从左到右的次序进行计算（但右结合运算符除外）&amp;&amp; 优先级大于 | | 。4.String类的substring方法可以从一个较大的字符串提取出一个子串。例如：    String greeting &#x3D; “Hello”;            String a &#x3D; greeting.substring(0,3);    打印 a 会输出    Hel。    即输出[a,b)。5.检测字符串是否相等string a &#x3D; “ok”;string b &#x3D; “ok”;a.equals(b)；“ok”.equals(“ok”);“ok”.equals(“b”);想要检测两个字符串是否相等，而不区分大小写，可用equalsIgnoreCase方法。“Hello”. equalsIgnoreCase(“hello”);6.一定不要使用&#x3D;&#x3D;来检测两个字符串是否相等!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! &#x3D;&#x3D;只能够确定两个字符串是否存放在同一位置上。当然，如果存放在同一位置上，它们必然相等。但是，完全有可能将内容相同的多个字符串副本放置在不同位置上。如果虚拟机始终将相同的字符串共享，就可以使用&#x3D;&#x3D;运算符检测是否相等。但实际上只有字符串字面量是共享的，而+或substring等操作得到的字符串并不共享。因此，千万不要视同&#x3D;&#x3D;运算符测试字符串的相等性！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！7.检查一个字符串既不是null也不是空串 if(str!&#x3D;null &amp;&amp; str.length()!&#x3D;0)。\n","slug":"java核心技术卷总结","date":"2022-04-25T11:48:12.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-04-14T05:33:17.113Z","categories_index":"","tags_index":"","author_index":"Aurora"}]